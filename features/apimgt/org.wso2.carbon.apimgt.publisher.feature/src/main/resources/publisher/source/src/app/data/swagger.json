{
  "swagger": "2.0",
  "info": {
    "description": "This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.\n\nPlease see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n",
    "version": "v1.1",
    "title": "WSO2 API Manager - Publisher API",
    "contact": {
      "name": "WSO2",
      "url": "http://wso2.com/products/api-manager/",
      "email": "architecture@wso2.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "apis.wso2.com",
  "basePath": "/api/am/publisher/v1",
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "OAuth2Security": [
        "apim:api_view"
      ]
    }
  ],
  "paths": {
    "/apis": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "Retrieve/Search APIs\n",
        "description": "This operation provides you a list of available APIs qualifying under a given search condition.\n\nEach retrieved API is represented with a minimal amount of attributes. If you want to get complete details of an API, you need to use **Get details of an API** operation.\n",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum size of resource array to return.\n",
            "required": false,
            "type": "integer",
            "default": 25
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting point within the complete list of items qualified.\n",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "X-WSO2-Tenant",
            "in": "header",
            "description": "For cross-tenant invocations, this is used to specify the tenant domain, where the resource need to be\n  retirieved from.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "**Search condition**.\n\nYou can search in attributes by using an **\"<attribute>:\"** modifier.\n\nEg.\n\"provider:wso2\" will match an API if the provider of the API contains \"wso2\".\n\"provider:\"wso2\"\" will match an API if the provider of the API is exactly \"wso2\".\n\"status:PUBLISHED\" will match an API if the API is in PUBLISHED state.\n\"label:external\" will match an API if it contains a Microgateway label called \"external\".\n\nAlso you can use combined modifiers\nEg.\nname:pizzashack version:v1 will match an API if the name of the API is pizzashack and version is v1.\n\nSupported attribute modifiers are [**version, context, name, status,\ndescription, subcontext, doc, provider, label**]\n\nIf no advanced attribute modifier has been specified,  the API names containing\nthe search term will be returned as a result.\n\nPlease note that you need to use encoded URL (URL encoding) if you are using a client which does not support URL encoding (such as curl)\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Defines whether the returned response should contain full details of API\n",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Media types acceptable for the response. Default is application/json.\n",
            "required": false,
            "type": "string",
            "default": "application/json"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nList of qualifying APIs is returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body."
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/APIList",
              "originalRef": "#/definitions/APIList"
            },
            "responseSchema": {
              "$ref": "#/definitions/APIList",
              "originalRef": "#/definitions/APIList"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Create a new API",
        "description": "This operation can be used to create a new API specifying the details of the API in the payload. The new API will be in `CREATED` state.\n\nThere is a special capability for a user who has `APIM Admin` permission such that he can create APIs on behalf of other users. For that he can to specify `\"provider\" : \"some_other_user\"` in the payload so that the API's creator will be shown as `some_other_user` in the UI.\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "API object that needs to be added\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/API",
              "originalRef": "#/definitions/API"
            }
          },
          {
            "name": "openAPIVersion",
            "in": "query",
            "description": "Open api version",
            "required": false,
            "type": "string",
            "enum": [
              "V2",
              "V3"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created.\nSuccessful response with the newly created object as entity in the body.\nLocation header contains URL of newly created entity.\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created resource.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/API",
              "originalRef": "#/definitions/API"
            },
            "responseSchema": {
              "$ref": "#/definitions/API",
              "originalRef": "#/definitions/API"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type.\nThe entity of the request was in a not supported format.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -H \"Content-Type: application/json\" -X POST -d @data.json https://127.0.0.1:9443/api/am/publisher/v1/apis",
        "x-wso2-request": "POST https://127.0.0.1:9443/api/am/publisher/v1/apis\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n\n{\r\n   \"name\": \"PizzaShackAPI\",\r\n   \"description\": \"This document describe a RESTFul API for Pizza Shack online pizza delivery store.\\r\\n\",\r\n   \"context\": \"/pizzashack\",\r\n   \"version\": \"1.0.0\",\r\n   \"provider\": \"admin\",\r\n   \"wsdlUri\": null,\r\n   \"lifeCycleStatus\": \"PUBLISHED\",\r\n   \"responseCachingEnabled\": false,\r\n   \"cacheTimeout\": 300,\r\n   \"destinationStatsEnabled\": false,\r\n   \"isDefaultVersion\": false,\r\n   \"transport\":    [\r\n      \"http\",\r\n      \"https\"\r\n   ],\r\n   \"tags\": [\"pizza\"],\r\n   \"policies\": [\"Unlimited\"],\r\n   \"maxTps\":    {\r\n      \"sandbox\": 5000,\r\n      \"production\": 1000\r\n   },\r\n   \"visibility\": \"PUBLIC\",\r\n   \"visibleRoles\": [],\r\n   \"visibleTenants\": [],\r\n   \"endpointConfig\": \"{\\\"production_endpoints\\\":{\\\"url\\\":\\\"https://localhost:9443/am/sample/pizzashack/v1/api/\\\",\\\"config\\\":null},\\\"sandbox_endpoints\\\":{\\\"url\\\":\\\"https://localhost:9443/am/sample/pizzashack/v1/api/\\\",\\\"config\\\":null},\\\"endpoint_type\\\":\\\"http\\\"}\",\r\n   \"endpointSecurity\":    {\r\n      \"username\": \"user\",\r\n      \"type\": \"basic\",\r\n      \"password\": \"pass\"\r\n   },\r\n   \"gatewayEnvironments\": \"Production and Sandbox\",\r\n   \"sequences\": [],\r\n   \"subscriptionAvailability\": null,\r\n   \"subscriptionAvailableTenants\": [],\r\n   \"businessInformation\":    {\r\n      \"businessOwnerEmail\": \"marketing@pizzashack.com\",\r\n      \"technicalOwnerEmail\": \"architecture@pizzashack.com\",\r\n      \"technicalOwner\": \"John Doe\",\r\n      \"businessOwner\": \"Jane Roe\"\r\n   },\r\n   \"corsConfiguration\":    {\r\n      \"accessControlAllowOrigins\": [\"*\"],\r\n      \"accessControlAllowHeaders\":       [\r\n         \"authorization\",\r\n         \"Access-Control-Allow-Origin\",\r\n         \"Content-Type\",\r\n         \"SOAPAction\"\r\n      ],\r\n      \"accessControlAllowMethods\":       [\r\n         \"GET\",\r\n         \"PUT\",\r\n         \"POST\",\r\n         \"DELETE\",\r\n         \"PATCH\",\r\n         \"OPTIONS\"\r\n      ],\r\n      \"accessControlAllowCredentials\": false,\r\n      \"corsConfigurationEnabled\": false\r\n   }\r\n}",
        "x-wso2-response": "HTTP/1.1 201 Created\nLocation: https://127.0.0.1:9443/api/am/publisher/v1/apis/7a2298c4-c905-403f-8fac-38c73301631f\nContent-Type: application/json\n\n{\r\n   \"id\": \"7a2298c4-c905-403f-8fac-38c73301631f\",\r\n   \"name\": \"PizzaShackAPI\",\r\n   \"description\": \"This document describe a RESTFul API for Pizza Shack online pizza delivery store.\\r\\n\",\r\n   \"context\": \"/pizzashack\",\r\n   \"version\": \"1.0.0\",\r\n   \"provider\": \"admin\",\r\n   \"wsdlUri\": null,\r\n   \"lifeCycleStatus\": \"CREATED\",\r\n   \"responseCachingEnabled\": false,\r\n   \"cacheTimeout\": 300,\r\n   \"destinationStatsEnabled\": null,\r\n   \"isDefaultVersion\": false,\r\n   \"transport\":    [\r\n      \"http\",\r\n      \"https\"\r\n   ],\r\n   \"tags\": [\"pizza\"],\r\n   \"policies\": [\"Unlimited\"],\r\n   \"maxTps\":    {\r\n      \"sandbox\": 5000,\r\n      \"production\": 1000\r\n   },\r\n   \"visibility\": \"PUBLIC\",\r\n   \"visibleRoles\": [],\r\n   \"visibleTenants\": [],\r\n   \"endpointConfig\": \"{\\\"production_endpoints\\\":{\\\"url\\\":\\\"https://localhost:9443/am/sample/pizzashack/v1/api/\\\",\\\"config\\\":null},\\\"sandbox_endpoints\\\":{\\\"url\\\":\\\"https://localhost:9443/am/sample/pizzashack/v1/api/\\\",\\\"config\\\":null},\\\"endpoint_type\\\":\\\"http\\\"}\",\r\n   \"endpointSecurity\":    {\r\n      \"username\": \"user\",\r\n      \"type\": \"basic\",\r\n      \"password\": \"pass\"\r\n   },\r\n   \"gatewayEnvironments\": \"Production and Sandbox\",\r\n   \"sequences\": [],\r\n   \"subscriptionAvailability\": null,\r\n   \"subscriptionAvailableTenants\": [],\r\n   \"businessInformation\":    {\r\n      \"businessOwnerEmail\": \"marketing@pizzashack.com\",\r\n      \"technicalOwnerEmail\": \"architecture@pizzashack.com\",\r\n      \"technicalOwner\": \"John Doe\",\r\n      \"businessOwner\": \"Jane Roe\"\r\n   },\r\n   \"corsConfiguration\":    {\r\n      \"accessControlAllowOrigins\": [\"*\"],\r\n      \"accessControlAllowHeaders\":       [\r\n         \"authorization\",\r\n         \"Access-Control-Allow-Origin\",\r\n         \"Content-Type\",\r\n         \"SOAPAction\"\r\n      ],\r\n      \"accessControlAllowMethods\":       [\r\n         \"GET\",\r\n         \"PUT\",\r\n         \"POST\",\r\n         \"DELETE\",\r\n         \"PATCH\",\r\n         \"OPTIONS\"\r\n      ],\r\n      \"accessControlAllowCredentials\": false,\r\n      \"corsConfigurationEnabled\": false\r\n   }\r\n}"
      }
    },
    "/apis/{apiId}": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "Get details of an API",
        "description": "Using this operation, you can retrieve complete details of a single API. You need to provide the Id of the API to retrive it.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-WSO2-Tenant",
            "in": "header",
            "description": "For cross-tenant invocations, this is used to specify the tenant domain, where the resource need to be\n  retirieved from.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nRequested API is returned\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/API",
              "originalRef": "#/definitions/API"
            },
            "responseSchema": {
              "$ref": "#/definitions/API",
              "originalRef": "#/definitions/API"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested API does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" https://127.0.0.1:9443/api/am/publisher/v1/apis/7a2298c4-c905-403f-8fac-38c73301631f",
        "x-wso2-request": "GET https://127.0.0.1:9443/api/am/publisher/v1/apis/7a2298c4-c905-403f-8fac-38c73301631f\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\r\n   \"id\": \"7a2298c4-c905-403f-8fac-38c73301631f\",\r\n   \"name\": \"PizzaShackAPI\",\r\n   \"description\": \"This document describe a RESTFul API for Pizza Shack online pizza delivery store.\\r\\n\",\r\n   \"context\": \"/pizzashack\",\r\n   \"version\": \"1.0.0\",\r\n   \"provider\": \"admin\",\r\n   \"endpointId\": \"{\\\"paths\\\":{\\\"/order\\\":{\\\"post\\\":{\\\"x-auth-type\\\":\\\"Application & Application User\\\",\\\"x-throttling-policy\\\":\\\"Unlimited\\\",\\\"description\\\":\\\"Create a new Order\\\",\\\"parameters\\\":[{\\\"schema\\\":{\\\"$ref\\\":\\\"#/definitions/Order\\\"},\\\"description\\\":\\\"Order object that needs to be added\\\",\\\"name\\\":\\\"body\\\",\\\"required\\\":true,\\\"in\\\":\\\"body\\\"}],\\\"responses\\\":{\\\"201\\\":{\\\"headers\\\":{\\\"Location\\\":{\\\"description\\\":\\\"The URL of the newly created resource.\\\",\\\"type\\\":\\\"string\\\"}},\\\"schema\\\":{\\\"$ref\\\":\\\"#/definitions/Order\\\"},\\\"description\\\":\\\"Created.\\\"}}}},\\\"/menu\\\":{\\\"get\\\":{\\\"x-auth-type\\\":\\\"Application & Application User\\\",\\\"x-throttling-policy\\\":\\\"Unlimited\\\",\\\"description\\\":\\\"Return a list of available menu items\\\",\\\"parameters\\\":[],\\\"responses\\\":{\\\"200\\\":{\\\"headers\\\":{},\\\"schema\\\":{\\\"title\\\":\\\"Menu\\\",\\\"properties\\\":{\\\"list\\\":{\\\"items\\\":{\\\"$ref\\\":\\\"#/definitions/MenuItem\\\"},\\\"type\\\":\\\"array\\\"}},\\\"type\\\":\\\"object\\\"},\\\"description\\\":\\\"OK.\\\"}}}}},\\\"schemes\\\":[\\\"https\\\"],\\\"produces\\\":[\\\"application/json\\\"],\\\"swagger\\\":\\\"2.0\\\",\\\"definitions\\\":{\\\"MenuItem\\\":{\\\"title\\\":\\\"Pizza menu Item\\\",\\\"properties\\\":{\\\"price\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":{\\\"type\\\":\\\"string\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"image\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"name\\\"]},\\\"Order\\\":{\\\"title\\\":\\\"Pizza Order\\\",\\\"properties\\\":{\\\"customerName\\\":{\\\"type\\\":\\\"string\\\"},\\\"delivered\\\":{\\\"type\\\":\\\"boolean\\\"},\\\"address\\\":{\\\"type\\\":\\\"string\\\"},\\\"pizzaType\\\":{\\\"type\\\":\\\"string\\\"},\\\"creditCardNumber\\\":{\\\"type\\\":\\\"string\\\"},\\\"quantity\\\":{\\\"type\\\":\\\"number\\\"},\\\"orderId\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"orderId\\\"]}},\\\"consumes\\\":[\\\"application/json\\\"],\\\"info\\\":{\\\"title\\\":\\\"PizzaShackAPI\\\",\\\"description\\\":\\\"This document describe a RESTFul API for Pizza Shack online pizza delivery store.\\\\n\\\",\\\"license\\\":{\\\"name\\\":\\\"Apache 2.0\\\",\\\"url\\\":\\\"http://www.apache.org/licenses/LICENSE-2.0.html\\\"},\\\"contact\\\":{\\\"email\\\":\\\"architecture@pizzashack.com\\\",\\\"name\\\":\\\"John Doe\\\",\\\"url\\\":\\\"http://www.pizzashack.com\\\"},\\\"version\\\":\\\"1.0.0\\\"}}\",\r\n   \"wsdlUri\": null,\r\n   \"lifeCycleStatus\": \"CREATED\",\r\n   \"responseCachingEnabled\": false,\r\n   \"cacheTimeout\": 300,\r\n   \"destinationStatsEnabled\": null,\r\n   \"isDefaultVersion\": false,\r\n   \"transport\":    [\r\n      \"http\",\r\n      \"https\"\r\n   ],\r\n   \"tags\": [\"pizza\"],\r\n   \"policies\": [\"Unlimited\"],\r\n   \"maxTps\":    {\r\n      \"sandbox\": 5000,\r\n      \"production\": 1000\r\n   },\r\n   \"visibility\": \"PUBLIC\",\r\n   \"visibleRoles\": [],\r\n   \"visibleTenants\": [],\r\n   \"endpointConfig\": \"{\\\"production_endpoints\\\":{\\\"url\\\":\\\"https://localhost:9443/am/sample/pizzashack/v1/api/\\\",\\\"config\\\":null},\\\"sandbox_endpoints\\\":{\\\"url\\\":\\\"https://localhost:9443/am/sample/pizzashack/v1/api/\\\",\\\"config\\\":null},\\\"endpoint_type\\\":\\\"http\\\"}\",\r\n   \"endpointSecurity\":    {\r\n      \"username\": \"user\",\r\n      \"type\": \"basic\",\r\n      \"password\": \"pass\"\r\n   },\r\n   \"gatewayEnvironments\": \"Production and Sandbox\",\r\n   \"sequences\": [],\r\n   \"subscriptionAvailability\": null,\r\n   \"subscriptionAvailableTenants\": [],\r\n   \"businessInformation\":    {\r\n      \"businessOwnerEmail\": \"marketing@pizzashack.com\",\r\n      \"technicalOwnerEmail\": \"architecture@pizzashack.com\",\r\n      \"technicalOwner\": \"John Doe\",\r\n      \"businessOwner\": \"Jane Roe\"\r\n   },\r\n   \"corsConfiguration\":    {\r\n      \"accessControlAllowOrigins\": [\"*\"],\r\n      \"accessControlAllowHeaders\":       [\r\n         \"authorization\",\r\n         \"Access-Control-Allow-Origin\",\r\n         \"Content-Type\",\r\n         \"SOAPAction\"\r\n      ],\r\n      \"accessControlAllowMethods\":       [\r\n         \"GET\",\r\n         \"PUT\",\r\n         \"POST\",\r\n         \"DELETE\",\r\n         \"PATCH\",\r\n         \"OPTIONS\"\r\n      ],\r\n      \"accessControlAllowCredentials\": false,\r\n      \"corsConfigurationEnabled\": false\r\n   }\r\n}"
      },
      "put": {
        "tags": [
          "APIs"
        ],
        "summary": "Update an API",
        "description": "This operation can be used to update an existing API.\nBut the properties `name`, `version`, `context`, `provider`, `state` will not be changed by this operation.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "API object that needs to be added\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/API",
              "originalRef": "#/definitions/API"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nSuccessful response with updated API object\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created resource.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/API",
              "originalRef": "#/definitions/API"
            },
            "responseSchema": {
              "$ref": "#/definitions/API",
              "originalRef": "#/definitions/API"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden.\nThe request must be conditional but no condition has been specified.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nThe resource to be updated does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the target resource.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create",
              "apim:api_publish"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -H \"Content-Type: application/json\" -X PUT -d @data.json https://127.0.0.1:9443/api/am/publisher/v1/apis/7a2298c4-c905-403f-8fac-38c73301631f",
        "x-wso2-request": "PUT https://127.0.0.1:9443/api/am/publisher/v1/apis/7a2298c4-c905-403f-8fac-38c73301631f\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\nContent-Type: application/json\n\n{\r\n   \"id\": \"7a2298c4-c905-403f-8fac-38c73301631f\",\r\n   \"name\": \"PizzaShackAPI\",\r\n   \"description\": \"This document describe a RESTFul API for Pizza Shack online pizza delivery store.\\r\\n\",\r\n   \"context\": \"/pizzashack\",\r\n   \"version\": \"1.0.0\",\r\n   \"provider\": \"admin\",\r\n   \"endpointId\": \"{\\\"paths\\\":{\\\"/order\\\":{\\\"post\\\":{\\\"x-auth-type\\\":\\\"Application & Application User\\\",\\\"x-throttling-policy\\\":\\\"Unlimited\\\",\\\"description\\\":\\\"Create a new Order\\\",\\\"parameters\\\":[{\\\"schema\\\":{\\\"$ref\\\":\\\"#/definitions/Order\\\"},\\\"description\\\":\\\"Order object that needs to be added\\\",\\\"name\\\":\\\"body\\\",\\\"required\\\":true,\\\"in\\\":\\\"body\\\"}],\\\"responses\\\":{\\\"201\\\":{\\\"headers\\\":{\\\"Location\\\":{\\\"description\\\":\\\"The URL of the newly created resource.\\\",\\\"type\\\":\\\"string\\\"}},\\\"schema\\\":{\\\"$ref\\\":\\\"#/definitions/Order\\\"},\\\"description\\\":\\\"Created.\\\"}}}},\\\"/menu\\\":{\\\"get\\\":{\\\"x-auth-type\\\":\\\"Application & Application User\\\",\\\"x-throttling-policy\\\":\\\"Unlimited\\\",\\\"description\\\":\\\"Return a list of available menu items\\\",\\\"parameters\\\":[],\\\"responses\\\":{\\\"200\\\":{\\\"headers\\\":{},\\\"schema\\\":{\\\"title\\\":\\\"Menu\\\",\\\"properties\\\":{\\\"list\\\":{\\\"items\\\":{\\\"$ref\\\":\\\"#/definitions/MenuItem\\\"},\\\"type\\\":\\\"array\\\"}},\\\"type\\\":\\\"object\\\"},\\\"description\\\":\\\"OK.\\\"}}}}},\\\"schemes\\\":[\\\"https\\\"],\\\"produces\\\":[\\\"application/json\\\"],\\\"swagger\\\":\\\"2.0\\\",\\\"definitions\\\":{\\\"MenuItem\\\":{\\\"title\\\":\\\"Pizza menu Item\\\",\\\"properties\\\":{\\\"price\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":{\\\"type\\\":\\\"string\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"image\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"name\\\"]},\\\"Order\\\":{\\\"title\\\":\\\"Pizza Order\\\",\\\"properties\\\":{\\\"customerName\\\":{\\\"type\\\":\\\"string\\\"},\\\"delivered\\\":{\\\"type\\\":\\\"boolean\\\"},\\\"address\\\":{\\\"type\\\":\\\"string\\\"},\\\"pizzaType\\\":{\\\"type\\\":\\\"string\\\"},\\\"creditCardNumber\\\":{\\\"type\\\":\\\"string\\\"},\\\"quantity\\\":{\\\"type\\\":\\\"number\\\"},\\\"orderId\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"orderId\\\"]}},\\\"consumes\\\":[\\\"application/json\\\"],\\\"info\\\":{\\\"title\\\":\\\"PizzaShackAPI\\\",\\\"description\\\":\\\"This document describe a RESTFul API for Pizza Shack online pizza delivery store.\\\\n\\\",\\\"license\\\":{\\\"name\\\":\\\"Apache 2.0\\\",\\\"url\\\":\\\"http://www.apache.org/licenses/LICENSE-2.0.html\\\"},\\\"contact\\\":{\\\"email\\\":\\\"architecture@pizzashack.com\\\",\\\"name\\\":\\\"John Doe\\\",\\\"url\\\":\\\"http://www.pizzashack.com\\\"},\\\"version\\\":\\\"1.0.0\\\"}}\",\r\n   \"wsdlUri\": null,\r\n   \"lifeCycleStatus\": \"CREATED\",\r\n   \"responseCachingEnabled\": false,\r\n   \"cacheTimeout\": 300,\r\n   \"destinationStatsEnabled\": null,\r\n   \"isDefaultVersion\": false,\r\n   \"transport\":    [\r\n      \"https\"\r\n   ],\r\n   \"tags\": [\"pizza\",\"chicken\"],\r\n   \"policies\": [\"Unlimited\"],\r\n   \"maxTps\":    {\r\n      \"sandbox\": 500,\r\n      \"production\": 100\r\n   },\r\n   \"visibility\": \"PUBLIC\",\r\n   \"visibleRoles\": [],\r\n   \"visibleTenants\": [],\r\n   \"endpointConfig\": \"{\\\"production_endpoints\\\":{\\\"url\\\":\\\"https://localhost:9443/am/sample/pizzashack/v1/api/\\\",\\\"config\\\":null},\\\"sandbox_endpoints\\\":{\\\"url\\\":\\\"https://localhost:9443/am/sample/pizzashack/v1/api/\\\",\\\"config\\\":null},\\\"endpoint_type\\\":\\\"http\\\"}\",\r\n   \"endpointSecurity\":    {\r\n      \"username\": \"user\",\r\n      \"type\": \"basic\",\r\n      \"password\": \"pass\"\r\n   },\r\n   \"gatewayEnvironments\": \"Production and Sandbox\",\r\n   \"sequences\": [],\r\n   \"subscriptionAvailability\": null,\r\n   \"subscriptionAvailableTenants\": [],\r\n   \"businessInformation\":    {\r\n      \"businessOwnerEmail\": \"marketing@pizzashack.com\",\r\n      \"technicalOwnerEmail\": \"architecture@pizzashack.com\",\r\n      \"technicalOwner\": \"John Doe\",\r\n      \"businessOwner\": \"Jane Roe\"\r\n   },\r\n   \"corsConfiguration\":    {\r\n      \"accessControlAllowOrigins\": [\"*\"],\r\n      \"accessControlAllowHeaders\":       [\r\n         \"authorization\",\r\n         \"Access-Control-Allow-Origin\",\r\n         \"Content-Type\",\r\n         \"SOAPAction\"\r\n      ],\r\n      \"accessControlAllowMethods\":       [\r\n         \"GET\",\r\n         \"PUT\",\r\n         \"POST\",\r\n         \"DELETE\",\r\n         \"PATCH\",\r\n         \"OPTIONS\"\r\n      ],\r\n      \"accessControlAllowCredentials\": false,\r\n      \"corsConfigurationEnabled\": false\r\n   }\r\n}",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\r\n   \"id\": \"7a2298c4-c905-403f-8fac-38c73301631f\",\r\n   \"name\": \"PizzaShackAPI\",\r\n   \"description\": \"This document describe a RESTFul API for Pizza Shack online pizza delivery store.\\r\\n\",\r\n   \"context\": \"/pizzashack\",\r\n   \"version\": \"1.0.0\",\r\n   \"provider\": \"admin\",\r\n   \"endpointId\": \"{\\\"paths\\\":{\\\"/order\\\":{\\\"post\\\":{\\\"x-auth-type\\\":\\\"Application & Application User\\\",\\\"x-throttling-policy\\\":\\\"Unlimited\\\",\\\"description\\\":\\\"Create a new Order\\\",\\\"parameters\\\":[{\\\"schema\\\":{\\\"$ref\\\":\\\"#/definitions/Order\\\"},\\\"description\\\":\\\"Order object that needs to be added\\\",\\\"name\\\":\\\"body\\\",\\\"required\\\":true,\\\"in\\\":\\\"body\\\"}],\\\"responses\\\":{\\\"201\\\":{\\\"headers\\\":{\\\"Location\\\":{\\\"description\\\":\\\"The URL of the newly created resource.\\\",\\\"type\\\":\\\"string\\\"}},\\\"schema\\\":{\\\"$ref\\\":\\\"#/definitions/Order\\\"},\\\"description\\\":\\\"Created.\\\"}}}},\\\"/menu\\\":{\\\"get\\\":{\\\"x-auth-type\\\":\\\"Application & Application User\\\",\\\"x-throttling-policy\\\":\\\"Unlimited\\\",\\\"description\\\":\\\"Return a list of available menu items\\\",\\\"parameters\\\":[],\\\"responses\\\":{\\\"200\\\":{\\\"headers\\\":{},\\\"schema\\\":{\\\"title\\\":\\\"Menu\\\",\\\"properties\\\":{\\\"list\\\":{\\\"items\\\":{\\\"$ref\\\":\\\"#/definitions/MenuItem\\\"},\\\"type\\\":\\\"array\\\"}},\\\"type\\\":\\\"object\\\"},\\\"description\\\":\\\"OK.\\\"}}}}},\\\"schemes\\\":[\\\"https\\\"],\\\"produces\\\":[\\\"application/json\\\"],\\\"swagger\\\":\\\"2.0\\\",\\\"definitions\\\":{\\\"MenuItem\\\":{\\\"title\\\":\\\"Pizza menu Item\\\",\\\"properties\\\":{\\\"price\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":{\\\"type\\\":\\\"string\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"image\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"name\\\"]},\\\"Order\\\":{\\\"title\\\":\\\"Pizza Order\\\",\\\"properties\\\":{\\\"customerName\\\":{\\\"type\\\":\\\"string\\\"},\\\"delivered\\\":{\\\"type\\\":\\\"boolean\\\"},\\\"address\\\":{\\\"type\\\":\\\"string\\\"},\\\"pizzaType\\\":{\\\"type\\\":\\\"string\\\"},\\\"creditCardNumber\\\":{\\\"type\\\":\\\"string\\\"},\\\"quantity\\\":{\\\"type\\\":\\\"number\\\"},\\\"orderId\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"orderId\\\"]}},\\\"consumes\\\":[\\\"application/json\\\"],\\\"info\\\":{\\\"title\\\":\\\"PizzaShackAPI\\\",\\\"description\\\":\\\"This document describe a RESTFul API for Pizza Shack online pizza delivery store.\\\\n\\\",\\\"license\\\":{\\\"name\\\":\\\"Apache 2.0\\\",\\\"url\\\":\\\"http://www.apache.org/licenses/LICENSE-2.0.html\\\"},\\\"contact\\\":{\\\"email\\\":\\\"architecture@pizzashack.com\\\",\\\"name\\\":\\\"John Doe\\\",\\\"url\\\":\\\"http://www.pizzashack.com\\\"},\\\"version\\\":\\\"1.0.0\\\"}}\",\r\n   \"wsdlUri\": null,\r\n   \"lifeCycleStatus\": \"CREATED\",\r\n   \"responseCachingEnabled\": false,\r\n   \"cacheTimeout\": 300,\r\n   \"destinationStatsEnabled\": null,\r\n   \"isDefaultVersion\": false,\r\n   \"transport\": [\"https\"],\r\n   \"tags\":    [\r\n      \"chicken\",\r\n      \"pizza\"\r\n   ],\r\n   \"policies\": [\"Unlimited\"],\r\n   \"maxTps\":    {\r\n      \"sandbox\": 500,\r\n      \"production\": 100\r\n   },\r\n   \"visibility\": \"PUBLIC\",\r\n   \"visibleRoles\": [],\r\n   \"visibleTenants\": [],\r\n   \"endpointConfig\": \"{\\\"production_endpoints\\\":{\\\"url\\\":\\\"https://localhost:9443/am/sample/pizzashack/v1/api/\\\",\\\"config\\\":null},\\\"sandbox_endpoints\\\":{\\\"url\\\":\\\"https://localhost:9443/am/sample/pizzashack/v1/api/\\\",\\\"config\\\":null},\\\"endpoint_type\\\":\\\"http\\\"}\",\r\n   \"endpointSecurity\":    {\r\n      \"username\": \"user\",\r\n      \"type\": \"basic\",\r\n      \"password\": \"pass\"\r\n   },\r\n   \"gatewayEnvironments\": \"Production and Sandbox\",\r\n   \"sequences\": [],\r\n   \"subscriptionAvailability\": null,\r\n   \"subscriptionAvailableTenants\": [],\r\n   \"businessInformation\":    {\r\n      \"businessOwnerEmail\": \"marketing@pizzashack.com\",\r\n      \"technicalOwnerEmail\": \"architecture@pizzashack.com\",\r\n      \"technicalOwner\": \"John Doe\",\r\n      \"businessOwner\": \"Jane Roe\"\r\n   },\r\n   \"corsConfiguration\":    {\r\n      \"accessControlAllowOrigins\": [\"*\"],\r\n      \"accessControlAllowHeaders\":       [\r\n         \"authorization\",\r\n         \"Access-Control-Allow-Origin\",\r\n         \"Content-Type\",\r\n         \"SOAPAction\"\r\n      ],\r\n      \"accessControlAllowMethods\":       [\r\n         \"GET\",\r\n         \"PUT\",\r\n         \"POST\",\r\n         \"DELETE\",\r\n         \"PATCH\",\r\n         \"OPTIONS\"\r\n      ],\r\n      \"accessControlAllowCredentials\": false,\r\n      \"corsConfigurationEnabled\": false\r\n   }\r\n}"
      },
      "delete": {
        "tags": [
          "APIs"
        ],
        "summary": "Delete an API",
        "description": "This operation can be used to delete an existing API proving the Id of the API.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nResource successfully deleted.\n"
          },
          "403": {
            "description": "Forbidden.\nThe request must be conditional but no condition has been specified.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nResource to be deleted does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the target resource.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_delete"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -X DELETE https://127.0.0.1:9443/api/am/publisher/v1/apis/6fb74674-4ab8-4b52-9886-f9a376985060",
        "x-wso2-request": "DELETE https://127.0.0.1:9443/api/am/publisher/v1/apis/6fb74674-4ab8-4b52-9886-f9a376985060\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK"
      }
    },
    "/apis/{apiId}/swagger": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "Get swagger definition",
        "description": "This operation can be used to retrieve the swagger definition of an API.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nRequested swagger document of the API is returned\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "type": "string",
              "example": ""
            },
            "responseSchema": {
              "type": "string",
              "example": ""
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested API does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" https://127.0.0.1:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/swagger",
        "x-wso2-request": "GET https://127.0.0.1:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/swagger\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 329\n\n{\n   \"paths\": {\"/*\": {\"get\":    {\n      \"x-auth-type\": \"Application\",\n      \"x-throttling-policy\": \"Unlimited\",\n      \"responses\": {\"200\": {\"description\": \"OK\"}}\n   }}},\n   \"swagger\": \"2.0\",\n   \"info\":    {\n      \"title\": \"PhoneVerification\",\n      \"description\": \"Verify a phone number\",\n      \"contact\":       {\n         \"email\": \"xx@ee.com\",\n         \"name\": \"xx\"\n      },\n      \"version\": \"1.0.0\"\n   }\n}"
      },
      "put": {
        "tags": [
          "APIs"
        ],
        "summary": "Update swagger definition",
        "description": "This operation can be used to update the swagger definition of an existing API. Swagger definition to be updated is passed as a form data parameter `apiDefinition`.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiDefinition",
            "in": "formData",
            "description": "Swagger definition of the API",
            "required": false,
            "type": "string"
          },
          {
            "name": "url",
            "in": "formData",
            "description": "Swagger definition URL of the API",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "Swagger definitio as a file",
            "required": false,
            "type": "file"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nSuccessful response with updated Swagger definition\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created resource.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "type": "string",
              "example": ""
            },
            "responseSchema": {
              "type": "string",
              "example": ""
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden.\nThe request must be conditional but no condition has been specified.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nThe resource to be updated does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization:Bearer 5311eca3-8ac8-354e-ab36-7e2fdd6a4013\" -F endpointId=\"{\\\"paths\\\":{\\\"\\/*\\\":{\\\"get\\\":{\\\"x-auth-type\\\":\\\"Application\\\",\\\"x-throttling-policy\\\":\\\"Unlimited\\\",\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}}},\\\"swagger\\\":\\\"2.0\\\",\\\"info\\\":{\\\"title\\\":\\\"PhoneVerification\\\",\\\"description\\\":\\\"Verify a phone number\\\",\\\"contact\\\":{\\\"email\\\":\\\"xx@ee.com\\\",\\\"name\\\":\\\"xx\\\"},\\\"version\\\":\\\"1.0.0\\\"}}\" -X PUT \"https://127.0.0.1:9443/api/am/publisher/v1/apis/8848faaa-7fd1-478a-baa2-48a4ebb92c98/swagger\"",
        "x-wso2-request": "PUT https://127.0.0.1:9443/api/am/publisher/v1/apis/8848faaa-7fd1-478a-baa2-48a4ebb92c98/swagger\nAuthorization:Bearer 5311eca3-8ac8-354e-ab36-7e2fdd6a4013\nContent-Length: 477\nContent-Type: multipart/form-data; boundary=------------------------4f51e636c0003d99\n\n--------------------------4f51e636c0003d99\nContent-Disposition: form-data; name=\"apiDefinition\"\n\n{\"paths\":{\"\\/*\":{\"get\":{\"x-auth-type\":\"Application\",\"x-throttling-policy\":\"Unlimited\",\"responses\":{\"200\":{\"description\":\"OK\"}}}}},\"swagger\":\"2.0\",\"info\":{\"title\":\"PhoneVerification\",\"description\":\"Verify a phone number\",\"contact\":{\"email\":\"xx@ee.com\",\"name\":\"xx\"},\"version\":\"1.0.0\"}}\n--------------------------4f51e636c0003d99--\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n   \"paths\": {\"/*\": {\"get\":    {\n      \"x-auth-type\": \"Application\",\n      \"x-throttling-policy\": \"Unlimited\",\n      \"responses\": {\"200\": {\"description\": \"OK\"}}\n   }}},\n   \"swagger\": \"2.0\",\n   \"info\":    {\n      \"title\": \"PhoneVerification\",\n      \"description\": \"Verify a phone number\",\n      \"contact\":       {\n         \"email\": \"xx@ee.com\",\n         \"name\": \"xx\"\n      },\n      \"version\": \"1.0.0\"\n   }\n}"
      }
    },
    "/apis/{apiId}/resource-policies": {
      "get": {
        "tags": [
          "API Resource Policies"
        ],
        "summary": "Get the resource policy (inflow/outflow) definitions",
        "description": "This operation can be used to retrieve conversion policy resource definitions of an API.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourcePath",
            "in": "query",
            "description": "Resource path of the resource policy definition",
            "required": false,
            "type": "string"
          },
          {
            "name": "verb",
            "in": "query",
            "description": "HTTP verb of the resource path of the resource policy definition",
            "required": false,
            "type": "string"
          },
          {
            "name": "sequenceType",
            "in": "query",
            "description": "sequence type of the resource policy resource definition",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nList of resource policy definitions of the API is returned\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/ResourcePolicyList",
              "originalRef": "#/definitions/ResourcePolicyList"
            },
            "responseSchema": {
              "$ref": "#/definitions/ResourcePolicyList",
              "originalRef": "#/definitions/ResourcePolicyList"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested API does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" https://localhost:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/resource-policies",
        "x-wso2-request": "GET https://localhost:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/resource-policies\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\r\n    \"list\": [\r\n        {\r\n            \"id\": \"1990b54c-6685-4058-a08c-8fd5353056a6\",\r\n            \"httpVerb\": \"get\",\r\n            \"resourcePath\": \"checkPhoneNumbers\",\r\n            \"content\": \"<header description=\\\"SOAPAction\\\" name=\\\"SOAPAction\\\" scope=\\\"transport\\\" value=\\\"http://ws.cdyne.com/PhoneVerify/query/CheckPhoneNumber\\\"/>\"\r\n        }\r\n    ],\r\n    \"count\": 1\r\n}"
      }
    },
    "/apis/{apiId}/resource-policies/{resourcePolicyId}": {
      "get": {
        "tags": [
          "API Resource Policies"
        ],
        "summary": "Get the resource policy (inflow/outflow) definition for a given resource identifier.",
        "description": "This operation can be used to retrieve conversion policy resource definitions of an API given the resource identifier.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourcePolicyId",
            "in": "path",
            "description": "registry resource Id\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nRequested resource policy definition of the API is returned for the given resource identifier.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/ResourcePolicyInfo",
              "originalRef": "#/definitions/ResourcePolicyInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/ResourcePolicyInfo",
              "originalRef": "#/definitions/ResourcePolicyInfo"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nRequested API does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" https://localhost:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/resource-policies/0bcb7f05-599d-4e1a-adce-5cb89bfe58d5",
        "x-wso2-request": "GET https://localhost:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/resource-policies/0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\r\n            \"id\": \"6c735e1d-8041-4f1e-b246-d28edaa650b0\",\r\n            \"httpVerb\": \"post\",\r\n            \"resourcePath\": \"checkPhoneNumbers\",\r\n            \"content\": \"<header description=\\\"SOAPAction\\\" name=\\\"SOAPAction\\\" scope=\\\"transport\\\" value=\\\"http://ws.cdyne.com/PhoneVerify/query/CheckPhoneNumber\\\"/>\"\r\n}"
      },
      "put": {
        "tags": [
          "API Resource Policies"
        ],
        "summary": "Update the resource policy(inflow/outflow) definition for the given resource identifier",
        "description": "This operation can be used to update the resource policy(inflow/outflow) definition for the given resource identifier of an existing API. resource policy definition to be updated is passed as a body parameter `content`.\n",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourcePolicyId",
            "in": "path",
            "description": "registry resource Id\n",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Content of the resource policy definition that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourcePolicyInfo",
              "originalRef": "#/definitions/ResourcePolicyInfo"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nSuccessful response with updated the resource policy definition\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created resource.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/ResourcePolicyInfo",
              "originalRef": "#/definitions/ResourcePolicyInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/ResourcePolicyInfo",
              "originalRef": "#/definitions/ResourcePolicyInfo"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden.\nThe request must be conditional but no condition has been specified.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nThe resource to be updated does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization:Bearer 5311eca3-8ac8-354e-ab36-7e2fdd6a4013\" -F apiDefinition=\"{\\\"paths\\\":{\\\"\\/*\\\":{\\\"get\\\":{\\\"x-auth-type\\\":\\\"Application\\\",\\\"x-throttling-tier\\\":\\\"Unlimited\\\",\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}}},\\\"x-wso2-security\\\":{\\\"apim\\\":{\\\"x-wso2-scopes\\\":[]}},\\\"swagger\\\":\\\"2.0\\\",\\\"info\\\":{\\\"title\\\":\\\"PhoneVerification\\\",\\\"description\\\":\\\"Verify a phone number\\\",\\\"contact\\\":{\\\"email\\\":\\\"xx@ee.com\\\",\\\"name\\\":\\\"xx\\\"},\\\"version\\\":\\\"1.0.0\\\"}}\" -X PUT \"https://localhost:9443/api/am/publisher/v1/apis/8848faaa-7fd1-478a-baa2-48a4ebb92c98/resource-policies/0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\"",
        "x-wso2-request": "PUT https://localhost:9443/api/am/publisher/v1/apis/8848faaa-7fd1-478a-baa2-48a4ebb92c98/resource-policies/0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\nAuthorization:Bearer 5311eca3-8ac8-354e-ab36-7e2fdd6a4013\nContent-Length: 477\nContent-Type: application/json; boundary=------------------------4f51e636c0003d99\n--------------------------4f51e636c0003d99\n{ \"content\": \"<header description=\\\"SOAPAction\\\" name=\\\"SOAPAction\\\" scope=\\\"transport\\\" value=\\\"http://ws.cdyne.com/PhoneVerify/query/CheckPhoneNumber\\\"/>\"}\n--------------------------4f51e636c0003d99--\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\r\n            \"id\": \"6c735e1d-8041-4f1e-b246-d28edaa650b0\",\r\n            \"httpVerb\": \"post\",\r\n            \"resourcePath\": \"checkPhoneNumbers\",\r\n            \"content\": \"<header description=\\\"SOAPAction\\\" name=\\\"SOAPAction\\\" scope=\\\"transport\\\" value=\\\"http://ws.cdyne.com/PhoneVerify/query/CheckPhoneNumber\\\"/>\"\r\n}"
      }
    },
    "/apis/{apiId}/thumbnail": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "Get thumbnail image",
        "description": "This operation can be used to download a thumbnail image of an API.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nThumbnail image returned\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested Document does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer d34baf74-3f02-3929-814e-88b27f750ba9\" https://127.0.0.1:9443/api/am/publisher/v1/apis/29c9ec3d-f590-467e-83e6-96d43517080f/thumbnail > image.jpg",
        "x-wso2-request": "GET https://127.0.0.1:9443/api/am/publisher/v1/apis/29c9ec3d-f590-467e-83e6-96d43517080f/thumbnail\nAuthorization: Bearer d34baf74-3f02-3929-814e-88b27f750ba9\n",
        "x-wso2-response": "HTTP/1.1 200 OK\r\nContent-Type: image/jpeg\r\n\r\n[image content]"
      },
      "put": {
        "tags": [
          "APIs"
        ],
        "summary": "Upload a thumbnail image",
        "description": "This operation can be used to upload a thumbnail image of an API. The thumbnail to be uploaded should be given as a form data parameter `file`.\n",
        "operationId": "updateAPIThumbnail",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "Image to upload",
            "required": true,
            "type": "file"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nImage updated\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the uploaded thumbnail image of the API.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/FileInfo",
              "originalRef": "#/definitions/FileInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FileInfo",
              "originalRef": "#/definitions/FileInfo"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nThe resource to be updated does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create",
              "apim:api_publish"
            ]
          }
        ],
        "x-wso2-curl": "curl -X POST -H \"Authorization: Bearer d34baf74-3f02-3929-814e-88b27f750ba9\" https://127.0.0.1:9443/api/am/publisher/v1/apis/29c9ec3d-f590-467e-83e6-96d43517080f/thumbnail -F file=@image.jpg",
        "x-wso2-request": "POST https://127.0.0.1:9443/api/am/publisher/v1/apis/8848faaa-7fd1-478a-baa2-48a4ebb92c98/thumbnail\nAuthorization: Bearer d34baf74-3f02-3929-814e-88b27f750ba9\nContent-Type: multipart/form-data; boundary=------------------------5e542e0e5b50e1e4\nContent-Length: 18333\n\n--------------------------5e542e0e5b50e1e4\nContent-Disposition: form-data; name=\"file\"; filename=\"image.jpg\"\nContent-Type: image/jpeg\n\n[image content]\n\n--------------------------5e542e0e5b50e1e4--\n",
        "x-wso2-response": "HTTP/1.1 201 Created\r\nLocation: https://127.0.0.1:9443/api/am/publisher/v1/apis/8848faaa-7fd1-478a-baa2-48a4ebb92c98/thumbnail\r\nContent-Type: application/json\r\n\r\n{\r\n   \"relativePath\": \"/apis/8848faaa-7fd1-478a-baa2-48a4ebb92c98/thumbnail\",\r\n   \"mediaType\": \"image/jpeg\"\r\n}"
      }
    },
    "/apis/{apiId}/subscription-policies": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "Get details of the subscription throttling policies of an API\n",
        "description": "This operation can be used to retrieve details of the subscription throttling policy of an API by specifying the API Id.\n\n`X-WSO2-Tenant` header can be used to retrive API subscription throttling policies that belongs to a different tenant domain. If not specified super tenant will be used. If Authorization header is present in the request, the user's tenant associated with the access token will be used.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-WSO2-Tenant",
            "in": "header",
            "description": "For cross-tenant invocations, this is used to specify the tenant domain, where the resource need to be\n  retirieved from.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nThrottling Policy returned\n",
            "headers": {
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests.\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/ThrottlingPolicy",
              "originalRef": "#/definitions/ThrottlingPolicy"
            },
            "responseSchema": {
              "$ref": "#/definitions/ThrottlingPolicy",
              "originalRef": "#/definitions/ThrottlingPolicy"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource.\n"
          },
          "404": {
            "description": "Not Found.\nRequested Throttling Policy does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ],
        "x-wso2-curl": "curl \"https://localhost:9443/api/am/publisher/v1//apis/268c9e55-3dc1-4f47-82e7-977e5343d077/subscription-policies\"",
        "x-wso2-request": "GET https://localhost:9443/api/am/publisher/v1/apis/268c9e55-3dc1-4f47-82e7-977e5343d077/subscription-policies\n",
        "x-wso2-curl-tenant": "curl -k -H \"X-WSO2-Tenant:test.com\" https://localhost:9443/api/am/publisher/v1/apis/268c9e55-3dc1-4f47-82e7-977e5343d077/subscription-policies",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n[{\n   \"unitTime\": 60000,\n   \"tierPlan\": \"FREE\",\n   \"stopOnQuotaReach\": true,\n   \"policyLevel\": \"api\",\n   \"requestCount\": 1,\n   \"description\": \"Allows 1 request(s) per minute.\",\n   \"name\": \"Bronze\",\n   \"attributes\": {}\n}]"
      }
    },
    "/apis/copy-api": {
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Create a new API version",
        "description": "This operation can be used to create a new version of an existing API. The new version is specified as `newVersion` query parameter. New API will be in `CREATED` state.\n",
        "parameters": [
          {
            "name": "newVersion",
            "in": "query",
            "description": "Version of the new API.",
            "required": true,
            "type": "string"
          },
          {
            "name": "defaultVersion",
            "in": "query",
            "description": "Specifies whether new API should be added as default version.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "apiId",
            "in": "query",
            "description": "**API ID** consisting of the **UUID** of the API.\nThe combination of the provider of the API, name of the API and the version is also accepted as a valid API I.\nShould be formatted as **provider-name-version**.\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created.\nSuccessful response with the newly created API as entity in the body. Location header contains URL of newly created API.\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created API.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/API",
              "originalRef": "#/definitions/API"
            },
            "responseSchema": {
              "$ref": "#/definitions/API",
              "originalRef": "#/definitions/API"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nAPI to copy does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create"
            ]
          }
        ]
      }
    },
    "/apis/change-lifecycle": {
      "post": {
        "tags": [
          "API Lifecycle"
        ],
        "summary": "Change API Status",
        "description": "This operation is used to change the lifecycle of an API. Eg: Publish an API which is in `CREATED` state. In order to change the lifecycle, we need to provide the lifecycle `action` as a query parameter.\n\nFor example, to Publish an API, `action` should be `Publish`. Note that the `Re-publish` action is available only after calling `Block`.\n\nSome actions supports providing additional paramters which should be provided as `lifecycleChecklist` parameter. Please see parameters table for more information.\n",
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "The action to demote or promote the state of the API.\n\nSupported actions are [ **Publish, Deploy as a Prototype, Demote to Created, Demote to Prototyped, Block, Deprecate, Re-Publish, Retire **]\n",
            "required": true,
            "type": "string",
            "enum": [
              "Publish",
              "Deploy as a Prototype",
              "Demote to Created",
              "Demote to Prototyped",
              "Block",
              "Deprecate",
              "Re-Publish",
              "Retire"
            ]
          },
          {
            "name": "lifecycleChecklist",
            "in": "query",
            "description": "\nSupported checklist items are as follows.\n1. **Deprecate Old Versions**: Setting this to true will deprecate older versions of a particular API when it is promoted to Published state from Created state.\n2. **Require Re-Subscription**: If you set this to true, users need to re subscribe to the API although they may have subscribed to an older version.\n\nYou can specify additional checklist items by using an **\"attribute:\"** modifier.\n\nEg: \"Deprecate Old Versions:true\" will deprecate older versions of a particular API when it is promoted to Published state from Created state. Multiple checklist items can be given in \"attribute1:true, attribute2:false\" format.\n\n**Sample CURL :**  curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -X POST \"https://localhost:9443/api/am/publisher/v1/apis/change-lifecycle?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&action=Publish&lifecycleChecklist=Deprecate Old Versions:true,Require Re-Subscription:true\"\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "apiId",
            "in": "query",
            "description": "**API ID** consisting of the **UUID** of the API.\nThe combination of the provider of the API, name of the API and the version is also accepted as a valid API I.\nShould be formatted as **provider-name-version**.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nLifecycle changed successfully.\n",
            "headers": {
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the changed API. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the API lifecycle has been modified the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/WorkflowResponse",
              "originalRef": "#/definitions/WorkflowResponse"
            },
            "responseSchema": {
              "$ref": "#/definitions/WorkflowResponse",
              "originalRef": "#/definitions/WorkflowResponse"
            }
          },
          "202": {
            "description": "Accepted.\nThe request has been accepted.\n",
            "schema": {
              "$ref": "#/definitions/WorkflowResponse",
              "originalRef": "#/definitions/WorkflowResponse"
            },
            "responseSchema": {
              "$ref": "#/definitions/WorkflowResponse",
              "originalRef": "#/definitions/WorkflowResponse"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nRequested API does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict.\nPending workflow task exists.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -X POST \"https://127.0.0.1:9443/api/am/publisher/v1/apis/change-lifecycle?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&action=Publish\"",
        "x-wso2-request": "POST https://127.0.0.1:9443/api/am/publisher/v1/apis/change-lifecycle?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&action=Publish\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK"
      }
    },
    "/apis/{apiId}/lifecycle-history": {
      "get": {
        "tags": [
          "API Lifecycle"
        ],
        "summary": "Get Lifecycle state change history of the API.",
        "description": "This operation can be used to retrieve Lifecycle state change history of the API.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nLifecycle state change history returned successfully.\n",
            "headers": {
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/LifecycleHistory",
              "originalRef": "#/definitions/LifecycleHistory"
            },
            "responseSchema": {
              "$ref": "#/definitions/LifecycleHistory",
              "originalRef": "#/definitions/LifecycleHistory"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested API does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer f8828f52-175a-4cb2-b246-02b1e6054f97\" https://127.0.0.1:9443/api/am/publisher/v1/apis/0527a55e-8dcf-4ce5-bddf-c77e8418be8a/lifecycle-history",
        "x-wso2-request": "GET https://127.0.0.1:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/lifecycle-history\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\n Content-Type: application/json \n Content-Encoding: gzip \n Transfer-Encoding: chunked \n\n [ { \"postState\" : \"Created\",\n    \"updatedTime\" : \"Feb 23, 2017 5:17:02 PM\",\n\"user\" : \"admin\"\n  },\n { \"postState\" : \"Published\",\n    \"previousState\" : \"Created\",\n    \"updatedTime\" : \"Feb 23, 2017 5:17:17 PM\",\n    \"user\" : \"admin\"\n }\n]"
      }
    },
    "/apis/{apiId}/lifecycle-state": {
      "get": {
        "tags": [
          "API Lifecycle"
        ],
        "summary": "Get Lifecycle state data of the API.",
        "description": "This operation can be used to retrieve Lifecycle state data of the API.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nLifecycle state data returned successfully.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/LifecycleState",
              "originalRef": "#/definitions/LifecycleState"
            },
            "responseSchema": {
              "$ref": "#/definitions/LifecycleState",
              "originalRef": "#/definitions/LifecycleState"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested API does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish",
              "apim:api_create"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer f8828f52-175a-4cb2-b246-02b1e6054f97\" https://127.0.0.1:9443/api/am/publisher/v1/apis/0527a55e-8dcf-4ce5-bddf-c77e8418be8a/lifecycle",
        "x-wso2-request": "GET https://127.0.0.1:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/lifecycle\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\n Content-Type: application/json \n Content-Encoding: gzip \n Transfer-Encoding: chunked \n\n {  \n   \"lcName\":\"API_LIFECYCLE\",\n   \"state\":\"Published\",\n   \"lifecycleId\":\"2febf145f07e457c9643100b6ec60679\",\n   \"checkItemBeanList\":[  \n\n   ],\n   \"inputBeanList\":[  \n\n   ],\n   \"customCodeBeanList\":[  \n      {  \n         \"classObject\":{  \n\n         },\n         \"targetName\":\"Maintenance\"\n      },\n      {  \n         \"classObject\":{  \n\n         },\n         \"targetName\":\"Deprecated\"\n      },\n      {  \n         \"classObject\":{  \n\n         },\n         \"targetName\":\"Created\"\n      },\n      {  \n         \"classObject\":{  \n\n         },\n         \"targetName\":\"Prototyped\"\n      }\n   ],\n   \"availableTransitionBeanList\":[  \n      {  \n         \"event\":\"Move to Maintenance\",\n         \"targetState\":\"Maintenance\"\n      },\n      {  \n         \"event\":\"Deploy as a Prototype\",\n         \"targetState\":\"Prototyped\"\n      },\n      {  \n         \"event\":\"Demote to Created\",\n         \"targetState\":\"Created\"\n      },\n      {  \n         \"event\":\"Deprecate\",\n         \"targetState\":\"Deprecated\"\n      },\n      {  \n         \"event\":\"Publish\",\n         \"targetState\":\"Published\"\n      }\n   ],\n   \"permissionBeanList\":[  \n\n   ]\n}"
      }
    },
    "/apis/{apiId}/lifecycle-state/pending-tasks": {
      "delete": {
        "tags": [
          "API Lifecycle"
        ],
        "summary": "Delete pending lifecycle state change tasks.",
        "description": "This operation can be used to remove pending lifecycle state change requests that are in pending state\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nLifecycle state change pending task removed successfully.\n"
          },
          "404": {
            "description": "Not Found.\nRequested API does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer f8828f52-175a-4cb2-b246-02b1e6054f97\" -X DELETE https://127.0.0.1:9443/api/am/publisher/v1/apis/0527a55e-8dcf-4ce5-bddf-c77e8418be8a/lifecycle/lifecycle-pending-task",
        "x-wso2-request": "DELETE https://127.0.0.1:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/lifecycle/lifecycle-pending-task\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK"
      }
    },
    "/apis/import-openapi": {
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Import an OpenAPI Definition",
        "description": "This operation can be used to create an API from an OpenAPI definition. Provide either `url` or `file`\nto specify the definition.\n\nSpecify additionalProperties with **at least** API's name, version, context and endpointConfig.\n",
        "operationId": "importOpenAPIDefinition",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "Definition to upload as a file",
            "required": false,
            "type": "file"
          },
          {
            "name": "url",
            "in": "formData",
            "description": "Definition url",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalProperties",
            "in": "formData",
            "description": "Additional attributes specified as a stringified JSON with API's schema",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created.\nSuccessful response with the newly created object as entity in the body.\nLocation header contains URL of newly created entity.\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created resource.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/API",
              "originalRef": "#/definitions/API"
            },
            "responseSchema": {
              "$ref": "#/definitions/API",
              "originalRef": "#/definitions/API"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type.\nThe entity of the request was in a not supported format.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create"
            ]
          }
        ]
      }
    },
    "/apis/import-wsdl": {
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Import a WSDL Definition",
        "description": "This operation can be used to create an API using a WSDL definition. Provide either `url` or `file`\nto specify the definition.\n\nWSDL can be speficied as a single file or a ZIP archive with WSDLs and reference XSDs etc.\nSpecify additionalProperties with **at least** API's name, version, context and endpointConfig.\n",
        "operationId": "importWSDLDefinition",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "WSDL definition as a file",
            "required": false,
            "type": "file"
          },
          {
            "name": "url",
            "in": "formData",
            "description": "WSDL Definition url",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalProperties",
            "in": "formData",
            "description": "Additional attributes specified as a stringified JSON with API's schema",
            "required": false,
            "type": "string"
          },
          {
            "name": "implementationType",
            "in": "formData",
            "description": "If 'SOAP' is specified, the API will be created with only one resource 'POST /*' which is to be used for SOAP\noperations.\n\nIf 'HTTP_BINDING' is specified, the API will be created with resources using HTTP binding operations\nwhich are extracted from the WSDL.\n",
            "required": false,
            "type": "string",
            "default": "SOAP",
            "enum": [
              "SOAPTOREST",
              "SOAP"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created.\nSuccessful response with the newly created object as entity in the body.\nLocation header contains URL of newly created entity.\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created resource.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/API",
              "originalRef": "#/definitions/API"
            },
            "responseSchema": {
              "$ref": "#/definitions/API",
              "originalRef": "#/definitions/API"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type.\nThe entity of the request was in a not supported format.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create"
            ]
          }
        ]
      }
    },
    "/apis/import-graphql-schema": {
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Import API Definition",
        "description": "This operation can be used to create api from api definition.\n\nAPI definition is GraphQL Schema\n",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "formData",
            "description": "Definition type to upload",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "Definition to uploads a file",
            "required": false,
            "type": "file"
          },
          {
            "name": "additionalProperties",
            "in": "formData",
            "description": "Additional attributes specified as a stringified JSON with API's schema",
            "required": false,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created.\nSuccessful response with the newly created object as entity in the body.\nLocation header contains URL of newly created entity.\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created resource.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/API",
              "originalRef": "#/definitions/API"
            },
            "responseSchema": {
              "$ref": "#/definitions/API",
              "originalRef": "#/definitions/API"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type.\nThe entity of the request was in a not supported format.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create"
            ]
          }
        ]
      }
    },
    "/apis/validate-openapi": {
      "post": {
        "tags": [
          "Validation"
        ],
        "summary": "Validate an OpenAPI Definition",
        "description": "This operation can be used to validate an OpenAPI definition and retrieve a summary. Provide either `url`\nor `file` to specify the definition.\n",
        "operationId": "validateOpenAPIDefinition",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "url",
            "in": "formData",
            "description": "OpenAPI definition url",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "OpenAPI definition as a file",
            "required": false,
            "type": "file"
          },
          {
            "name": "returnContent",
            "in": "query",
            "description": "Specify whether to return the full content of the OpenAPI definition in the response. This is only\napplicable when using url based validation\n",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nAPI definition validation information is returned\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/OpenAPIDefinitionValidationResponse",
              "originalRef": "#/definitions/OpenAPIDefinitionValidationResponse"
            },
            "responseSchema": {
              "$ref": "#/definitions/OpenAPIDefinitionValidationResponse",
              "originalRef": "#/definitions/OpenAPIDefinitionValidationResponse"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nWorkflow for the given reference in not found.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create"
            ]
          }
        ]
      }
    },
    "/apis/validate-endpoint": {
      "post": {
        "tags": [
          "Validation"
        ],
        "summary": "Check whether given endpoint url is valid",
        "description": "Using this operation, it is possible check whether the given API endpoint url is a valid url\n",
        "operationId": "validateEndpoint",
        "parameters": [
          {
            "name": "endpointUrl",
            "in": "query",
            "description": "API endpoint url",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nAPI definition validation information is returned\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiEndpointValidationResponse",
              "originalRef": "#/definitions/ApiEndpointValidationResponse"
            },
            "responseSchema": {
              "$ref": "#/definitions/ApiEndpointValidationResponse",
              "originalRef": "#/definitions/ApiEndpointValidationResponse"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nWorkflow for the given reference in not found.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create"
            ]
          }
        ]
      }
    },
    "/apis/validate": {
      "post": {
        "tags": [
          "Validation"
        ],
        "summary": "Check given API attibute name is already exist.",
        "description": "Using this operation, you can check a given API context is already used. You need to provide the context name you want to check.\n",
        "operationId": "validateAPI",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "**Search condition**.\n\nYou can search in attributes by using an **\"<attribute>:\"** modifier.\n\nEg.\n\"name:wso2\" will match an API if the provider of the API is exactly \"wso2\".\n\nSupported attribute modifiers are [** version, context, name **]\n\nIf no advanced attribute modifier has been specified, search will match the\ngiven query string against API Name.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nAPI definition validation information is returned\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nWorkflow for the given reference in not found.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create"
            ]
          }
        ]
      }
    },
    "/apis/validate-wsdl": {
      "post": {
        "tags": [
          "Validation"
        ],
        "summary": "Validate a WSDL Definition",
        "description": "This operation can be used to validate a WSDL definition and retrieve a summary. Provide either `url`\nor `file` to specify the definition.\n",
        "operationId": "validateWSDLDefinition",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "url",
            "in": "formData",
            "description": "Definition url",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "Definition to upload as a file",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nAPI definition validation information is returned\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/WSDLValidationResponse",
              "originalRef": "#/definitions/WSDLValidationResponse"
            },
            "responseSchema": {
              "$ref": "#/definitions/WSDLValidationResponse",
              "originalRef": "#/definitions/WSDLValidationResponse"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nWorkflow for the given reference in not found.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create"
            ]
          }
        ]
      }
    },
    "/apis/validate-graphql-schema": {
      "post": {
        "tags": [
          "Validation"
        ],
        "summary": "Validate GraphQL API definition and retrieve a summary",
        "description": "This operation can be used to validate a graphQL definition and retrieve a summary.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "Definition to upload as a file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nAPI definition validation information is returned\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/GraphQLValidationResponse",
              "originalRef": "#/definitions/GraphQLValidationResponse"
            },
            "responseSchema": {
              "$ref": "#/definitions/GraphQLValidationResponse",
              "originalRef": "#/definitions/GraphQLValidationResponse"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nWorkflow for the given reference in not found.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create"
            ]
          }
        ]
      }
    },
    "/apis/{apiId}/graphql-schema": {
      "get": {
        "tags": [
          "GraphQL Schema (Individual)"
        ],
        "summary": "Get the Schema of a GraphQL API",
        "description": "This operation can be used to retrieve the Schema definition of a GraphQL API.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Media types acceptable for the response. Default is application/json.\n",
            "required": false,
            "type": "string",
            "default": "application/json"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nRequested GraphQL Schema DTO object belongs to the API\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/GraphQLSchema",
              "originalRef": "#/definitions/GraphQLSchema"
            },
            "responseSchema": {
              "$ref": "#/definitions/GraphQLSchema",
              "originalRef": "#/definitions/GraphQLSchema"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested API does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "x-scope": "apim:api_view",
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" \"https://localhost:9443/api/am/publisher/v1/apis/7f82f6b0-2667-441e-af23-c0fc44cf3a17/graphql-schema\"",
        "x-wso2-request": "GET https://localhost:9443/api/am/publisher/v1/apis/7f82f6b0-2667-441e-af23-c0fc44cf3a17/graphql-schema\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n\r\n{\r\n   \"name\": \"admin--hello1.0.0.graphql\",\r\n   \"schemaDefinition\": \"schema {\r\n  \r\n  # The query root of HackerNews GraphQL interface.\r\n  query: Query\r\n\r\n  # The root query for implementing GraphQL mutations.\r\n  mutation: Mutation\r\n}\r\n\r\ntype Link {\r\n\r\n  # ID of the link\r\n  id: ID!\r\n\r\n  # URL of the link\r\n  url: String!\r\n\r\n  # Description of the link\r\n  description: String\r\n}\r\n\r\ninput LinkFilter {\r\n\r\n  # Value to be checked whether it contains in the description\r\n  description_contains: String\r\n\r\n  # Value to be checked whether it contains in the URL\r\n  url_contains: String\r\n}\r\n\r\ntype Query {\r\n\r\n  # Fetches all the links\r\n  #\r\n  # Arguments\r\n  # filter: To filter the links according a specific criteria\r\n  # skip: Skip to a specific index in the list (default value is 0)\r\n  # first: Index of the link first to display (default value is 0)\r\n  allLinks(filter: LinkFilter, skip: Int = 0, first: Int = 0): [Link]\r\n}\r\n\r\ntype Mutation {\r\n\r\n  # Creates a new link\r\n  #\r\n  # Arguments\r\n  # url: URL of the link\r\n  # description: Description about the link\r\n  createLink(url: String!, description: String!): Link\r\n}\r\n\"\r\n}"
      },
      "put": {
        "tags": [
          "GraphQL Schema"
        ],
        "summary": "Add a Schema to a GraphQL API",
        "description": "This operation can be used to add a GraphQL Schema definition to an existing GraphQL API.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "schemaDefinition",
            "in": "formData",
            "description": "schema definition of the GraphQL API",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nSuccessful response with updated schema definition\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created resource.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by cache, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden.\nThe request must be conditional but no condition has been specified.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nThe resource to be updated does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "x-scope": "apim:api_create",
        "x-wso2-curl": "curl -k -H \"Authorization:Bearer 5311eca3-8ac8-354e-ab36-7e2fdd6a4013\" -H \"Content-Type: application/json\" -X POST -d @data.json \"https://localhost:9443/api/am/publisher/v1/apis/af3f96da-9ccf-463f-8cee-13ec8530a9cd/graphql-schema\"",
        "x-wso2-request": "PUT https://localhost:9443/api/am/publisher/v1/apis/af3f96da-9ccf-463f-8cee-13ec8530a9cd/graphql-schema\r\nContent-Type: text/plain\r\nAuthorization: Bearer 7d237cab-7011-3f81-b384-24d03e750873\r\n\r\n{\r\n   \"name\": \"admin--HackerNewsAPI1.0.0.graphql\",\r\n   \"schemaDefinition\": \"schema {\r\n  \r\n  # The query root of HackerNews GraphQL interface.\r\n  query: Query\r\n\r\n  # The root query for implementing GraphQL mutations.\r\n  mutation: Mutation\r\n}\r\n\r\ntype Link {\r\n\r\n  # ID of the link\r\n  id: ID!\r\n\r\n  # URL of the link\r\n  url: String!\r\n\r\n  # Description of the link\r\n  description: String\r\n}\r\n\r\ninput LinkFilter {\r\n\r\n  # Value to be checked whether it contains in the description\r\n  description_contains: String\r\n\r\n  # Value to be checked whether it contains in the URL\r\n  url_contains: String\r\n}\r\n\r\ntype Query {\r\n\r\n  # Fetches all the links\r\n  #\r\n  # Arguments\r\n  # filter: To filter the links according a specific criteria\r\n  # skip: Skip to a specific index in the list (default value is 0)\r\n  # first: Index of the link first to display (default value is 0)\r\n  allLinks(filter: LinkFilter, skip: Int = 0, first: Int = 0): [Link]\r\n}\r\n\r\ntype Mutation {\r\n\r\n  # Creates a new link\r\n  #\r\n  # Arguments\r\n  # url: URL of the link\r\n  # description: Description about the link\r\n  createLink(url: String!, description: String!): Link\r\n}\r\n\"\r\n}",
        "x-wso2-response": "HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n\r\n{\r\n   \"name\": \"admin--HackerNewsAPI1.0.0.graphql\",\r\n   \"schemaDefinition\": \"schema {\r\n  \r\n  # The query root of HackerNews GraphQL interface.\r\n  query: Query\r\n\r\n  # The root query for implementing GraphQL mutations.\r\n  mutation: Mutation\r\n}\r\n\r\ntype Link {\r\n\r\n  # ID of the link\r\n  id: ID!\r\n\r\n  # URL of the link\r\n  url: String!\r\n\r\n  # Description of the link\r\n  description: String\r\n}\r\n\r\ninput LinkFilter {\r\n\r\n  # Value to be checked whether it contains in the description\r\n  description_contains: String\r\n\r\n  # Value to be checked whether it contains in the URL\r\n  url_contains: String\r\n}\r\n\r\ntype Query {\r\n\r\n  # Fetches all the links\r\n  #\r\n  # Arguments\r\n  # filter: To filter the links according a specific criteria\r\n  # skip: Skip to a specific index in the list (default value is 0)\r\n  # first: Index of the link first to display (default value is 0)\r\n  allLinks(filter: LinkFilter, skip: Int = 0, first: Int = 0): [Link]\r\n}\r\n\r\ntype Mutation {\r\n\r\n  # Creates a new link\r\n  #\r\n  # Arguments\r\n  # url: URL of the link\r\n  # description: Description about the link\r\n  createLink(url: String!, description: String!): Link\r\n}\r\n\"\r\n}"
      }
    },
    "/apis/{apiId}/amznResourceNames": {
      "get": {
        "tags": [
          "AWS Lambda (Individual)"
        ],
        "summary": "Retrieve the ARNs of AWS Lambda functions",
        "description": "This operation can be use to retrieve ARNs of AWS Lambda function for a given AWS credentials.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nRequested ARN List of the API is returned\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "type": "string",
              "example": "{\n   \"count\": \"2\",\n   \"list\": [\n      \"arn:aws:lambda:us-west-2:123456789012:function:my-function1\",\n      \"arn:aws:lambda:us-west-2:123456789012:function:my-function2\"\n   ]\n}"
            },
            "responseSchema": {
              "type": "string",
              "example": "{\n   \"count\": \"2\",\n   \"list\": [\n      \"arn:aws:lambda:us-west-2:123456789012:function:my-function1\",\n      \"arn:aws:lambda:us-west-2:123456789012:function:my-function2\"\n   ]\n}"
            }
          },
          "404": {
            "description": "Not Found.\nRequested resource does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" https://127.0.0.1:9443/api/am/publisher/v1.0/apis/64eca60b-2e55-4c38-8603-e9e6bad7d809/amznResourceNames",
        "x-wso2-request": "GET https://127.0.0.1:9443/api/am/publisher/v1.0/apis/64eca60b-2e55-4c38-8603-e9e6bad7d809/arns\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n   \"count\": \"2\",\n   \"list\": [\n      \"arn:aws:lambda:us-west-2:123456789012:function:my-function1\",\n      \"arn:aws:lambda:us-west-2:123456789012:function:my-function2\"\n   ]\n}"
      }
    },
    "/apis/{apiId}/monetize": {
      "post": {
        "tags": [
          "API Monetization"
        ],
        "summary": "Configure monetization for a given API",
        "description": "This operation can be used to configure monetization for a given API.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Monetization data object\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIMonetizationInfo",
              "originalRef": "#/definitions/APIMonetizationInfo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK.\nMonetization status changed successfully.\n"
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nRequested resource does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -H \"Content-Type: application/json\" -X POST -d @data.json \"https://127.0.0.1:9443/api/am/publisher/v1/apis/96077508-fd01-4fae-bc64-5de0e2baf43c/monetize\"",
        "x-wso2-request": "POST https://127.0.0.1:9443/api/am/publisher/v1/apis/96077508-fd01-4fae-bc64-5de0e2baf43c/monetize\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\nContent-Type: application/json\n{\r\n   \"enabled\":\"true\",\r\n   \"properties\":{\r\n      \"vendor\":\"test\",\r\n      \"type\":\"postpaid\"\r\n   }\r\n}",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n{\r\n   \"enabled\":\"true\",\r\n   \"properties\":{\r\n      \"vendor\":\"test\",\r\n      \"type\":\"postpaid\"\r\n   }\r\n}"
      }
    },
    "/apis/{apiId}/monetization": {
      "get": {
        "tags": [
          "API Monetization"
        ],
        "summary": "Get monetization status for each tier in a given API",
        "description": "This operation can be used to get monetization status for each tier in a given API\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nMonetization status for each tier returned successfully.\n"
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nRequested resource does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -H \"Content-Type: application/json\" \"https://127.0.0.1:9443/api/am/publisher/v1/apis/96077508-fd01-4fae-bc64-5de0e2baf43c/monetization\"",
        "x-wso2-request": "GET https://127.0.0.1:9443/api/am/publisher/v1/apis/96077508-fd01-4fae-bc64-5de0e2baf43c/monetization\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\nContent-Type: application/json",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n{\r\n   \"enabled\":\"true\",\r\n   \"monetizedTiers\":{\r\n      \"tier1\":\"enabled\",\r\n      \"tier2\":\"disabled\"\r\n   }\r\n}"
      }
    },
    "/apis/{apiId}/revenue": {
      "get": {
        "tags": [
          "API Monetization"
        ],
        "summary": "Get total revenue details of a given monetized API with meterd billing.",
        "description": "This operation can be used to get details of total revenue details of a given monetized API with meterd billing.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nDetails of a total revenue returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body."
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future)."
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modified the last time. Used by caches, or in conditional requests (Will be supported in future)."
              }
            },
            "schema": {
              "$ref": "#/definitions/APIRevenue",
              "originalRef": "#/definitions/APIRevenue"
            },
            "responseSchema": {
              "$ref": "#/definitions/APIRevenue",
              "originalRef": "#/definitions/APIRevenue"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested Subscription does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" https://127.0.0.1:9443/api/am/publisher/v1/apis/64eca60b-2e55-4c38-8603-e9e6bad7d809/revenue",
        "x-wso2-request": "GET https://127.0.0.1:9443/api/am/publisher/v1/apis/64eca60b-2e55-4c38-8603-e9e6bad7d809/revenue\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n   \"object\": \"invoice\",\n   \"account_country\": \"US\",\n   \"account_name\": \"test.com\",\n   \"amount_due\": \"0\",\n   \"amount_paid\": \"0\"\n  \"amount_remaining\": \"0\"\n}"
      }
    },
    "/apis/{apiId}/documents": {
      "get": {
        "tags": [
          "API Documents"
        ],
        "summary": "Get a list of documents of an API",
        "description": "This operation can be used to retrieve a list of documents belonging to an API by providing the id of the API.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum size of resource array to return.\n",
            "required": false,
            "type": "integer",
            "default": 25
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting point within the complete list of items qualified.\n",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nDocument list is returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/DocumentList",
              "originalRef": "#/definitions/DocumentList"
            },
            "responseSchema": {
              "$ref": "#/definitions/DocumentList",
              "originalRef": "#/definitions/DocumentList"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested API does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" \"https://127.0.0.1:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents\"",
        "x-wso2-request": "GET https://127.0.0.1:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n   \"previous\": \"\",\n   \"list\":    [\n            {\n         \"visibility\": \"API_LEVEL\",\n         \"sourceType\": \"INLINE\",\n         \"sourceUrl\": null,\n         \"otherTypeName\": null,\n         \"documentId\": \"0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\",\n         \"summary\": \"This is a sample documentation for v1.0\",\n         \"name\": \"PhoneVerification API Documentation\",\n         \"type\": \"HOWTO\"\n      },\n            {\n         \"visibility\": \"API_LEVEL\",\n         \"sourceType\": \"URL\",\n         \"sourceUrl\": \"http://wiki.cdyne.com/index.php/Phone_Verification\",\n         \"otherTypeName\": null,\n         \"documentId\": \"4145df31-04f1-440c-8d08-68952874622c\",\n         \"summary\": \"This is the URL for online documentation\",\n         \"name\": \"Online Documentation\",\n         \"type\": \"SAMPLES\"\n      }\n   ],\n   \"next\": \"\",\n   \"count\": 2\n}"
      },
      "post": {
        "tags": [
          "API Documents"
        ],
        "summary": "Add a new document to an API",
        "description": "This operation can be used to add a new documentation to an API. This operation only adds the metadata of a document. To add the actual content we need to use **Upload the content of an API document ** API once we obtain a document Id by this operation.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Document object that needs to be added\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created.\nSuccessful response with the newly created Document object as entity in the body.\nLocation header contains URL of newly added document.\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location to the newly created Document.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            },
            "responseSchema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "415": {
            "description": "Unsupported media type.\nThe entity of the request was in a not supported format.\n"
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:document_create"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -H \"Content-Type: application/json\" -X POST -d @data.json \"https://127.0.0.1:9443/api/am/publisher/v1/apis/96077508-fd01-4fae-bc64-5de0e2baf43c/documents\"",
        "x-wso2-request": "POST https://127.0.0.1:9443/api/am/publisher/v1/apis/96077508-fd01-4fae-bc64-5de0e2baf43c/documents\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\nContent-Type: application/json\n\n{\n    \"visibility\": \"API_LEVEL\",\n    \"sourceType\": \"INLINE\",\n    \"sourceUrl\": null,\n    \"otherTypeName\": null,\n    \"summary\": \"This is a sample documentation\",\n    \"name\": \"Introduction to PhoneVerification API\",\n    \"type\": \"HOWTO\"\n}",
        "x-wso2-response": "HTTP/1.1 201 Created\nLocation: https://127.0.0.1:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents/ffd5790d-b7a9-4cb6-b76a-f8b83ecdd058\nContent-Type: application/json\n\n{\n   \"visibility\": \"API_LEVEL\",\n   \"sourceType\": \"INLINE\",\n   \"sourceUrl\": null,\n   \"otherTypeName\": null,\n   \"documentId\": \"ffd5790d-b7a9-4cb6-b76a-f8b83ecdd058\",\n   \"summary\": \"This is a sample documentation\",\n   \"name\": \"Introduction to PhoneVerification API\",\n   \"type\": \"HOWTO\"\n}"
      }
    },
    "/apis/{apiId}/documents/{documentId}": {
      "get": {
        "tags": [
          "API Documents"
        ],
        "summary": "Get a document of an API",
        "description": "This operation can be used to retrieve a particular document's metadata associated with an API.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document Identifier\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nDocument returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            },
            "responseSchema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested Document does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" \"https://127.0.0.1:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents/0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\"",
        "x-wso2-request": "GET https://127.0.0.1:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents/0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n   \"visibility\": \"API_LEVEL\",\n   \"sourceType\": \"INLINE\",\n   \"sourceUrl\": null,\n   \"otherTypeName\": null,\n   \"documentId\": \"0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\",\n   \"summary\": \"This is a sample documentation\",\n   \"name\": \"PhoneVerification API Documentation\",\n   \"type\": \"HOWTO\"\n}"
      },
      "put": {
        "tags": [
          "API Documents"
        ],
        "summary": "Update a document of an API",
        "description": "This operation can be used to update metadata of an API's document.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document Identifier\n",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Document object that needs to be added\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nDocument updated\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the updated document.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            },
            "responseSchema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nThe resource to be updated does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:document_manage"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization:Bearer b0982cd2aacd463ff5f63cd5ebe58f4a\" -H \"Content-Type: application/json\" -X PUT -d data.json \"https://127.0.0.1:9443/api/am/publisher/v1/apis/96077508-fd01-4fae-bc64-5de0e2baf43c/documents/0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\"",
        "x-wso2-request": "PUT https://127.0.0.1:9443/api/am/publisher/v1/apis/96077508-fd01-4fae-bc64-5de0e2baf43c/documents/0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\nAuthorization:Bearer b0982cd2aacd463ff5f63cd5ebe58f4a\nContent-Type: application/json\n\n{\n   \"visibility\": \"API_LEVEL\",\n   \"sourceType\": \"INLINE\",\n   \"sourceUrl\": null,\n   \"otherTypeName\": null,\n   \"documentId\": \"0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\",\n   \"summary\": \"This is a sample documentation for v1.0\",\n   \"name\": \"PhoneVerification API Documentation\",\n   \"type\": \"HOWTO\"\n}",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n   \"visibility\": \"API_LEVEL\",\n   \"sourceType\": \"INLINE\",\n   \"sourceUrl\": null,\n   \"otherTypeName\": null,\n   \"documentId\": \"0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\",\n   \"summary\": \"This is a sample documentation for v1.0\",\n   \"name\": \"PhoneVerification API Documentation\",\n   \"type\": \"HOWTO\"\n}"
      },
      "delete": {
        "tags": [
          "API Documents"
        ],
        "summary": "Delete a document of an API",
        "description": "This operation can be used to delete a document associated with an API.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document Identifier\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nResource successfully deleted.\n"
          },
          "404": {
            "description": "Not Found.\nResource to be deleted does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:document_manage"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -X DELETE https://127.0.0.1:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents/ffd5790d-b7a9-4cb6-b76a-f8b83ecdd058",
        "x-wso2-request": "DELETE https://127.0.0.1:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents/ffd5790d-b7a9-4cb6-b76a-f8b83ecdd058\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK"
      }
    },
    "/apis/{apiId}/documents/{documentId}/content": {
      "get": {
        "tags": [
          "API Documents"
        ],
        "summary": "Get the content of an API document",
        "description": "This operation can be used to retrive the content of an API's document.\n\nThe document can be of 3 types. In each cases responses are different.\n\n1. **Inline type**:\n   The content of the document will be retrieved in `text/plain` content type\n\n   _Sample cURL_ : `curl -k -H \"Authorization:Bearer 579f0af4-37be-35c7-81a4-f1f1e9ee7c51\" -F inlineContent=@\"docs.txt\" -X POST \"https://localhost:9443/api/am/publisher/v1/apis/995a4972-3178-4b17-a374-756e0e19127c/documents/43c2bcce-60e7-405f-bc36-e39c0c5e189e/content`\n2. **FILE type**:\n   The file will be downloaded with the related content type (eg. `application/pdf`)\n3. **URL type**:\n    The client will recieve the URL of the document as the Location header with the response with - `303 See Other`\n",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document Identifier\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nFile or inline content returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            }
          },
          "303": {
            "description": "See Other.\nSource can be retrived from the URL specified at the Location header.\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Source URL of the document.\n"
              }
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested Document does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization:Bearer b0982cd2aacd463ff5f63cd5ebe58f4a\" \"https://127.0.0.1:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents/daf732d3-bda2-46da-b381-2c39d901ea61/content\" > sample.pdf",
        "x-wso2-request": "GET https://127.0.0.1:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents/daf732d3-bda2-46da-b381-2c39d901ea61/content\nAuthorization:Bearer b0982cd2aacd463ff5f63cd5ebe58f4a\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Disposition: attachment; filename=\"sample.pdf\"\nContent-Type: application/octet-stream\nContent-Length: 7802\n\n%PDF-1.4\n%Ã¤Ã¼Ã¶ÃŸ\n2 0 obj\n<</Length 3 0 R/Filter/FlateDecode>>\nstream\n..\n>>\nstartxref\n7279\n%%EOF"
      },
      "post": {
        "tags": [
          "API Documents"
        ],
        "summary": "Upload the content of an API document",
        "description": "Thid operation can be used to upload a file or add inline content to an API document.\n\n**IMPORTANT:**\n* Either **file** or **inlineContent** form data parameters should be specified at one time.\n* Document's source type should be **FILE** in order to upload a file to the document using **file** parameter.\n* Document's source type should be **INLINE** in order to add inline content to the document using **inlineContent** parameter.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document Identifier\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "Document to upload",
            "required": false,
            "type": "file"
          },
          {
            "name": "inlineContent",
            "in": "formData",
            "description": "Inline content of the document",
            "required": false,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nDocument updated\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the updated content of the document.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            },
            "responseSchema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nThe resource to be updated does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:document_create"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization:Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -F file=@\"sample.pdf\" -X POST \"https://127.0.0.1:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents/daf732d3-bda2-46da-b381-2c39d901ea61/content\"",
        "x-wso2-request": "POST https://127.0.0.1:9443/api/am/publisher/v1/apis/8848faaa-7fd1-478a-baa2-48a4ebb92c98/documents/b3a79270-02bb-4e39-9ac1-90ce8f6c84af/content\nAuthorization:Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\nContent-Length: 8004\nContent-Type: multipart/form-data; boundary=------------------------7b9a53f1ffa452b9\n\n--------------------------7b9a53f1ffa452b9\nContent-Disposition: form-data; name=\"file\"; filename=\"sample.pdf\"\nContent-Type: application/octet-stream\n\n[file content]\n\n--------------------------7b9a53f1ffa452b9--\n",
        "x-wso2-response": "HTTP/1.1 201 Created\nLocation: https://127.0.0.1:9443/api/am/publisher/v1/apis/8848faaa-7fd1-478a-baa2-48a4ebb92c98/documents/b3a79270-02bb-4e39-9ac1-90ce8f6c84af/content\nContent-Type: application/json\n\n{\n    \"visibility\":\"API_LEVEL\",\n    \"sourceType\":\"FILE\",\n    \"sourceUrl\":null,\n    \"otherTypeName\":null,\n    \"documentId\":\"daf732d3-bda2-46da-b381-2c39d901ea61\",\n    \"summary\":\"This is a sample documentation pdf\",\n    \"name\":\"Introduction to PhoneVerification API PDF\",\n    \"type\":\"HOWTO\"\n}"
      }
    },
    "/apis/{apiId}/documents/validate": {
      "post": {
        "tags": [
          "API Documents"
        ],
        "summary": "Check whether a document with the provided name exist.",
        "description": "This operation can be used to verify the document name exists or not.\n",
        "operationId": "validateDocument",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the document which needs to be checked for the existance.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nSuccessful response if the api name exist.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            },
            "responseSchema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Requested document not found.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:document_create"
            ]
          }
        ]
      }
    },
    "/apis/{apiId}/mediation-policies": {
      "get": {
        "tags": [
          "API Mediation Policies"
        ],
        "summary": "Get all mediation policies of an API\n",
        "description": "This operation provides you a list of available mediation policies of an API.\n",
        "operationId": "apisApiIdMediationPoliciesGet",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum size of resource array to return.\n",
            "required": false,
            "type": "integer",
            "default": 25
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting point within the complete list of items qualified.\n",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "query",
            "in": "query",
            "description": "-Not supported yet-",
            "required": false,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nList of qualifying APIs is returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body."
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/MediationList",
              "originalRef": "#/definitions/MediationList"
            },
            "responseSchema": {
              "$ref": "#/definitions/MediationList",
              "originalRef": "#/definitions/MediationList"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:mediation_policy_view"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "API Mediation Policies"
        ],
        "summary": "Add an API specific mediation policy",
        "description": "This operation can be used to add an API specifc mediation policy.\n",
        "operationId": "apisApiIdMediationPoliciesPost",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "mediationPolicyFile",
            "in": "formData",
            "description": "Mediation Policy to upload",
            "required": false,
            "type": "file"
          },
          {
            "name": "inlineContent",
            "in": "formData",
            "description": "Inline content of the Mediation Policy",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "description": "Type of the mediation sequence",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "OK.\nmediation policy uploaded\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the uploaded mediation policy of the API.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/Mediation",
              "originalRef": "#/definitions/Mediation"
            },
            "responseSchema": {
              "$ref": "#/definitions/Mediation",
              "originalRef": "#/definitions/Mediation"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nThe resource to be updated does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:mediation_policy_create"
            ]
          }
        ]
      }
    },
    "/apis/{apiId}/mediation-policies/{mediationPolicyId}": {
      "get": {
        "tags": [
          "API Mediation Policy"
        ],
        "summary": "Get an API specific mediation policy",
        "description": "This operation can be used to retrieve a particular API specific mediation policy.\n",
        "operationId": "apisApiIdMediationPoliciesMediationPolicyIdGet",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "mediationPolicyId",
            "in": "path",
            "description": "Mediation policy Id\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nMediation policy returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/Mediation",
              "originalRef": "#/definitions/Mediation"
            },
            "responseSchema": {
              "$ref": "#/definitions/Mediation",
              "originalRef": "#/definitions/Mediation"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested Document does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "API Mediation Policy"
        ],
        "summary": "Delete an API specific mediation policy",
        "description": "This operation can be used to delete an existing API specific mediation policy providing the Id of the API and the Id of the mediation policy.\n",
        "operationId": "apisApiIdMediationPoliciesMediationPolicyIdDelete",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "mediationPolicyId",
            "in": "path",
            "description": "Mediation policy Id\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nResource successfully deleted.\n"
          },
          "403": {
            "description": "Forbidden.\nThe request must be conditional but no condition has been specified.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nResource to be deleted does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:mediation_policy_manage"
            ]
          }
        ]
      }
    },
    "/apis/{apiId}/mediation-policies/{mediationPolicyId}/content": {
      "get": {
        "tags": [
          "API Mediation Policy"
        ],
        "summary": "Download an API specific mediation policy",
        "description": "This operation can be used to download a particular API specific mediation policy.\n",
        "operationId": "apisApiIdMediationPoliciesMediationPolicyIdContentGet",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "mediationPolicyId",
            "in": "path",
            "description": "Mediation policy Id\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nMediation policy returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested file does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "API Mediation Policy"
        ],
        "summary": "Update an API specific mediation policy",
        "description": "This operation can be used to update an existing mediation policy of an API.\n",
        "operationId": "apisApiIdMediationPoliciesMediationPolicyIdContentPut",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "Mediation Policy to upload",
            "required": false,
            "type": "file"
          },
          {
            "name": "inlineContent",
            "in": "formData",
            "description": "Inline content of the Mediation Policy",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "description": "Type of the mediation sequence(in/out/fault)",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "mediationPolicyId",
            "in": "path",
            "description": "Mediation policy Id\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nSuccessful response with updated API object\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created resource.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/Mediation",
              "originalRef": "#/definitions/Mediation"
            },
            "responseSchema": {
              "$ref": "#/definitions/Mediation",
              "originalRef": "#/definitions/Mediation"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden.\nThe request must be conditional but no condition has been specified.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nThe resource to be updated does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:mediation_policy_manage"
            ]
          }
        ]
      }
    },
    "/apis/{apiId}/wsdl": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "Get WSDL definition",
        "description": "This operation can be used to retrieve the WSDL definition of an API. It can be either a single WSDL file or a WSDL archive.\n\nThe type of the WSDL of the API is indicated at the \"wsdlInfo\" element of the API payload definition.\n",
        "operationId": "getWSDLOfAPI",
        "produces": [
          "application/json",
          "application/wsdl",
          "application/zip"
        ],
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nRequested WSDL document of the API is returned\n",
            "headers": {
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested API does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "APIs"
        ],
        "summary": "Update WSDL definition",
        "description": "This operation can be used to update the WSDL definition of an existing API. WSDL to be updated can be passed as either \"url\" or \"file\".\nOnly one of \"url\" or \"file\" can be used at the same time. \"file\" can be specified as a single WSDL file or as a zip file which has a WSDL\nand its dependencies (eg: XSDs)\n",
        "operationId": "updateWSDLOfAPI",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "WSDL file or archive to upload",
            "required": true,
            "type": "file"
          },
          {
            "name": "url",
            "in": "formData",
            "description": "WSDL Definition url",
            "required": false,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nSuccessful response with updated WSDL definition\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created resource.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden.\nThe request must be conditional but no condition has been specified.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nThe resource to be updated does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create"
            ]
          }
        ]
      }
    },
    "/scopes/{name}": {
      "head": {
        "tags": [
          "scope"
        ],
        "summary": "Check given scope name is already exist",
        "description": "Using this operation, user can check a given scope name exists or not.\n",
        "operationId": "validateScope",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Scope name\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Requested scope name exists."
          },
          "404": {
            "description": "Not Found. Requested scope name does not exist."
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create",
              "apim:api_publish"
            ]
          }
        ]
      }
    },
    "/apis/{apiId}/resource-paths": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "Get Resource Paths of an API",
        "description": "This operation can be used to retrieve resource paths defined for a specific api.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum size of resource array to return.\n",
            "required": false,
            "type": "integer",
            "default": 25
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting point within the complete list of items qualified.\n",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nResourcePaths returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modified the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/ResourcePathList",
              "originalRef": "#/definitions/ResourcePathList"
            },
            "responseSchema": {
              "$ref": "#/definitions/ResourcePathList",
              "originalRef": "#/definitions/ResourcePathList"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested Document does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer 5aa0acc0-0ce3-3a0b-8cc8-db5ef696ee23\" https://localhost:9443/api/am/publisher/v1/apis/40082986-6488-4b86-801a-b0b069d4588c/resource-paths",
        "x-wso2-request": "GET https://localhost:9443/api/am/publisher/v1/apis/40082986-6488-4b86-801a-b0b069d4588c/resource-paths\r\nAuthorization: Bearer 5aa0acc0-0ce3-3a0b-8cc8-db5ef696ee23",
        "x-wso2-response": ""
      }
    },
    "/apis/{apiId}/auditapi": {
      "get": {
        "tags": [
          "API Audit"
        ],
        "summary": "Retrieve the Security Audit Report of the Audit API",
        "description": "Retrieve the Security Audit Report of the Audit API\n",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "description": "Media types acceptable for the response. Default is application/json.\n",
            "required": false,
            "type": "string",
            "default": "application/json"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nThe Security Audit Report has been returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content of the body.\n",
                "default": "application/json"
              }
            },
            "schema": {
              "$ref": "#/definitions/AuditReport",
              "originalRef": "#/definitions/AuditReport"
            },
            "responseSchema": {
              "$ref": "#/definitions/AuditReport",
              "originalRef": "#/definitions/AuditReport"
            }
          },
          "404": {
            "description": "Not Found.\nThe Security Audit Report was not found.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ]
      }
    },
    "/apis/{apiId}/external-stores": {
      "get": {
        "tags": [
          "External Stores"
        ],
        "summary": "Get the list of external stores which an API is published to",
        "description": "This operation can be used to retrieve a list of external stores which an API is published to by providing the id of the API.\n",
        "operationId": "getAllPublishedExternalStoresByAPI",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nExternal Store list is returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/APIExternalStoreList",
              "originalRef": "#/definitions/APIExternalStoreList"
            },
            "responseSchema": {
              "$ref": "#/definitions/APIExternalStoreList",
              "originalRef": "#/definitions/APIExternalStoreList"
            }
          },
          "404": {
            "description": "Not Found.\nRequested API does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error while getting external stores of the API.",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ]
      }
    },
    "/apis/{apiId}/publish-to-external-stores": {
      "post": {
        "tags": [
          "External Stores"
        ],
        "summary": "Publish an API to external stores",
        "description": "This operation can be used to publish an API to a list of external stores.\n",
        "operationId": "publishAPIToExternalStores",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the **UUID** of the API.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "externalStoreIds",
            "in": "query",
            "description": "External Store Ids of stores which the API needs to be published or updated.",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nAPI was successfully published to all the selected external stores.\n",
            "headers": {
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the blocked subscription.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the subscription has been blocked.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/APIExternalStoreList",
              "originalRef": "#/definitions/APIExternalStoreList"
            },
            "responseSchema": {
              "$ref": "#/definitions/APIExternalStoreList",
              "originalRef": "#/definitions/APIExternalStoreList"
            }
          },
          "404": {
            "description": "Not Found.\nRequest API resource or external store Ids not found.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error while publishing to external stores",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ]
      }
    },
    "/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get all Subscriptions",
        "description": "This operation can be used to retrieve a list of subscriptions of the user associated with the provided access token. This operation is capable of\n\n1. Retrieving all subscriptions for the user's APIs.\n`GET https://127.0.0.1:9443/api/am/publisher/v1/subscriptions`\n\n2. Retrieving subscriptions for a specific API.\n`GET https://127.0.0.1:9443/api/am/publisher/v1/subscriptions?apiId=c43a325c-260b-4302-81cb-768eafaa3aed`\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "query",
            "description": "**API ID** consisting of the **UUID** of the API.\nThe combination of the provider of the API, name of the API and the version is also accepted as a valid API I.\nShould be formatted as **provider-name-version**.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum size of resource array to return.\n",
            "required": false,
            "type": "integer",
            "default": 25
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting point within the complete list of items qualified.\n",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Keywords to filter subscriptions\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nSubscription list returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/SubscriptionList",
              "originalRef": "#/definitions/SubscriptionList"
            },
            "responseSchema": {
              "$ref": "#/definitions/SubscriptionList",
              "originalRef": "#/definitions/SubscriptionList"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "406": {
            "description": "Not Acceptable. The requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:subscription_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" \"https://127.0.0.1:9443/api/am/publisher/v1/subscriptions?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b\"",
        "x-wso2-request": "GET https://127.0.0.1:9443/api/am/publisher/v1/subscriptions?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n \n{\n   \"previous\": \"\",\n   \"list\":    [\n            {\n         \"subscriptionId\": \"64eca60b-2e55-4c38-8603-e9e6bad7d809\",\n         \"policy\": \"Gold\",\n         \"apiIdentifier\": \"admin-PhoneVerification-1.0.0\",\n         \"applicationId\": \"896658a0-b4ee-4535-bbfa-806c894a4015\",\n         \"lifeCycleStatus\": \"UNBLOCKED\"\n      },\n            {\n         \"subscriptionId\": \"7ac22c34-8745-4cfe-91e0-262c50b2f2e3\",\n         \"policy\": \"Gold\",\n         \"apiIdentifier\": \"admin-PhoneVerification-1.0.0\",\n         \"applicationId\": \"367a2361-8db5-4140-8133-c6c8dc7fa0c4\",\n         \"lifeCycleStatus\": \"UNBLOCKED\"\n      }\n   ],\n   \"next\": \"\",\n   \"count\": 2\n}"
      }
    },
    "/subscriptions/{subscriptionId}/usage": {
      "get": {
        "tags": [
          "API Monetization"
        ],
        "summary": "Get details of a pending invoice for a monetized subscription with meterd billing.",
        "description": "This operation can be used to get details of a pending invoice for a monetized subscription with meterd billing.\n",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "Subscription Id\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nDetails of a pending invoice returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body."
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future)."
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modified the last time. Used by caches, or in conditional requests (Will be supported in future)."
              }
            },
            "schema": {
              "$ref": "#/definitions/APIMonetizationUsage",
              "originalRef": "#/definitions/APIMonetizationUsage"
            },
            "responseSchema": {
              "$ref": "#/definitions/APIMonetizationUsage",
              "originalRef": "#/definitions/APIMonetizationUsage"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested Subscription does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:subscription_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" https://127.0.0.1:9443/api/am/publisher/v1/subscriptions/64eca60b-2e55-4c38-8603-e9e6bad7d809/usage",
        "x-wso2-request": "GET https://127.0.0.1:9443/api/am/publisher/v1/subscriptions/64eca60b-2e55-4c38-8603-e9e6bad7d809/usage\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n   \"object\": \"invoice\",\n   \"account_country\": \"US\",\n   \"account_name\": \"test.com\",\n   \"amount_due\": \"0\",\n   \"amount_paid\": \"0\"\n  \"amount_remaining\": \"0\"\n}"
      }
    },
    "/subscriptions/block-subscription": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Block a subscription",
        "description": "This operation can be used to block a subscription. Along with the request, `blockState` must be specified as a query parameter.\n\n1. `BLOCKED` : Subscription is completely blocked for both Production and Sandbox environments.\n2. `PROD_ONLY_BLOCKED` : Subscription is blocked for Production environment only.\n",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockState",
            "in": "query",
            "description": "Subscription block state.\n",
            "required": true,
            "type": "string",
            "enum": [
              "BLOCKED",
              "PROD_ONLY_BLOCKED"
            ]
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nSubscription was blocked successfully.\n",
            "headers": {
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the blocked subscription.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the subscription has been blocked.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nRequested subscription does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:subscription_block"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -X POST \"https://127.0.0.1:9443/api/am/publisher/v1/subscriptions/block-subscription?subscriptionId=64eca60b-2e55-4c38-8603-e9e6bad7d809&blockState=PROD_ONLY_BLOCKED\"",
        "x-wso2-request": "POST https://127.0.0.1:9443/api/am/publisher/v1/subscriptions/block-subscription?subscriptionId=64eca60b-2e55-4c38-8603-e9e6bad7d809&blockState=PROD_ONLY_BLOCKED\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n \n{\n   \"subscriptionId\": \"64eca60b-2e55-4c38-8603-e9e6bad7d809\",\n   \"policy\": \"Gold\",\n   \"apiIdentifier\": \"admin-PhoneVerification-1.0.0\",\n   \"applicationId\": \"896658a0-b4ee-4535-bbfa-806c894a4015\",\n   \"lifeCycleStatus\": \"PROD_ONLY_BLOCKED\"\n}"
      }
    },
    "/subscriptions/unblock-subscription": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Unblock a Subscription",
        "description": "This operation can be used to unblock a subscription specifying the subscription Id. The subscription will be fully unblocked after performing this operation.\n",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nSubscription was unblocked successfully.\n",
            "headers": {
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the unblocked subscription.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the subscription has been unblocked.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nRequested subscription does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:subscription_block"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -X POST \"https://127.0.0.1:9443/api/am/publisher/v1/subscriptions/unblock-subscription?subscriptionId=64eca60b-2e55-4c38-8603-e9e6bad7d809\"",
        "x-wso2-request": "POST https://127.0.0.1:9443/api/am/publisher/v1/subscriptions/unblock-subscription?subscriptionId=64eca60b-2e55-4c38-8603-e9e6bad7d809\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8`\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n   \"subscriptionId\": \"64eca60b-2e55-4c38-8603-e9e6bad7d809\",\n   \"policy\": \"Gold\",\n   \"apiIdentifier\": \"admin-PhoneVerification-1.0.0\",\n   \"applicationId\": \"896658a0-b4ee-4535-bbfa-806c894a4015\",\n   \"lifeCycleStatus\": \"UNBLOCKED\"\n} "
      }
    },
    "/throttling-policies/{policyLevel}": {
      "get": {
        "tags": [
          "Throttling Policies"
        ],
        "summary": "Get all throttling policies for the given type",
        "description": "This operation can be used to list the available policies for a given policy level. Tier level should be specified as a path parameter and should be one of `subscription` and `api`.\n`subscription` is for Subscription Level policies and `api` is for Resource Level policies\n",
        "operationId": "getAllThrottlingPolicies",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum size of resource array to return.\n",
            "required": false,
            "type": "integer",
            "default": 25
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting point within the complete list of items qualified.\n",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "policyLevel",
            "in": "path",
            "description": "List API or Application or Resource type policies.\n",
            "required": true,
            "type": "string",
            "enum": [
              "api",
              "subcription"
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nList of policies returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body."
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/ThrottlingPolicyList",
              "originalRef": "#/definitions/ThrottlingPolicyList"
            },
            "responseSchema": {
              "$ref": "#/definitions/ThrottlingPolicyList",
              "originalRef": "#/definitions/ThrottlingPolicyList"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" https://127.0.0.1:9443/api/am/publisher/v1/policies/api",
        "x-wso2-request": "GET https://127.0.0.1:9443/api/am/publisher/v1/policies/api\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n\n{\n   \"previous\": \"\",\n   \"list\":    [\n            {\n         \"unitTime\": 60000,\n         \"tierPlan\": \"FREE\",\n         \"tierLevel\": \"api\",\n         \"stopOnQuotaReach\": true,\n         \"requestCount\": 1,\n         \"description\": \"Allows 1 request(s) per minute.\",\n         \"name\": \"Bronze\",\n         \"attributes\": {}\n      },\n            {\n         \"unitTime\": 60000,\n         \"tierPlan\": \"FREE\",\n         \"tierLevel\": \"api\",\n         \"stopOnQuotaReach\": true,\n         \"requestCount\": 20,\n         \"description\": \"Allows 20 request(s) per minute.\",\n         \"name\": \"Gold\",\n         \"attributes\": {}\n      },\n            {\n         \"unitTime\": 60000,\n         \"tierPlan\": \"FREE\",\n         \"tierLevel\": \"api\",\n         \"stopOnQuotaReach\": true,\n         \"requestCount\": 5,\n         \"description\": \"Allows 5 request(s) per minute.\",\n         \"name\": \"Silver\",\n         \"attributes\": {}\n      },\n            {\n         \"unitTime\": 0,\n         \"tierPlan\": null,\n         \"policyLevel\": \"api\",\n         \"stopOnQuotaReach\": true,\n         \"requestCount\": 0,\n         \"description\": \"Allows unlimited requests\",\n         \"name\": \"Unlimited\",\n         \"attributes\": {}\n      }\n   ],\n   \"next\": \"\",\n   \"count\": 4\n}"
      }
    },
    "/throttling-policies/{policyLevel}/{policyName}": {
      "get": {
        "tags": [
          "Throttling Policies"
        ],
        "summary": "Get details of a policy",
        "description": "This operation can be used to retrieve details of a single policy by specifying the policy level and policy name.\n",
        "operationId": "getThrottlingPolicyByName",
        "parameters": [
          {
            "name": "policyName",
            "in": "path",
            "description": "Tier name\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "policyLevel",
            "in": "path",
            "description": "List API or Application or Resource type policies.\n",
            "required": true,
            "type": "string",
            "enum": [
              "api",
              "subcription"
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nTier returned\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/ThrottlingPolicy",
              "originalRef": "#/definitions/ThrottlingPolicy"
            },
            "responseSchema": {
              "$ref": "#/definitions/ThrottlingPolicy",
              "originalRef": "#/definitions/ThrottlingPolicy"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested Tier does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" https://127.0.0.1:9443/api/am/publisher/v1/policies/api/Bronze",
        "x-wso2-request": "GET https://127.0.0.1:9443/api/am/publisher/v1/policies/api/Bronze\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n   \"unitTime\": 60000,\n   \"tierPlan\": \"FREE\",\n   \"policyLevel\": \"api\",\n   \"stopOnQuotaReach\": true,\n   \"requestCount\": 1,\n   \"description\": \"Allows 1 request(s) per minute.\",\n   \"name\": \"Bronze\",\n   \"attributes\": {}\n}"
      }
    },
    "/mediation-policies": {
      "get": {
        "tags": [
          "Global Mediation Policies"
        ],
        "summary": "Get all global level mediation policies\n",
        "description": "This operation provides you a list of available all global level mediation policies.\n",
        "operationId": "getAllGlobalMediationPolicies",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum size of resource array to return.\n",
            "required": false,
            "type": "integer",
            "default": 25
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting point within the complete list of items qualified.\n",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "query",
            "in": "query",
            "description": "-Not supported yet-",
            "required": false,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nList of mediation policies is returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body."
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/MediationList",
              "originalRef": "#/definitions/MediationList"
            },
            "responseSchema": {
              "$ref": "#/definitions/MediationList",
              "originalRef": "#/definitions/MediationList"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:mediation_policy_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" https://localhost:9443/api/am/publisher/v1/mediation-policies",
        "x-wso2-request": "GET https://localhost:9443/api/am/publisher/v1/mediation-policies\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n   \"count\": 10,\r\n   \"next\": null,\r\n   \"previous\": null,\r\n   \"list\":    [\r\n            {\r\n         \"name\": \"debug_json_fault\",\r\n         \"id\": \"563de8f3-dd1d-4ec7-afc2-d158c663ed34\",\r\n         \"type\": \"fault\"\r\n      },\r\n            {\r\n         \"name\": \"json_fault\",\r\n         \"id\": \"f9c36f4d-a2b6-41e7-b311-d358a47916be\",\r\n         \"type\": \"fault\"\r\n      },\r\n            {\r\n         \"name\": \"json_to_xml_in_message\",\r\n         \"id\": \"3921225b-7918-4b95-a851-22c4e4e3e911\",\r\n         \"type\": \"in\"\r\n      },\r\n            {\r\n         \"name\": \"debug_in_flow\",\r\n         \"id\": \"2bc15f93-4455-4763-89b8-83600fb9d731\",\r\n         \"type\": \"in\"\r\n      },\r\n            {\r\n         \"name\": \"log_in_message\",\r\n         \"id\": \"4d287cca-76ab-44ca-b22e-919fc27c50e3\",\r\n         \"type\": \"in\"\r\n      },\r\n            {\r\n         \"name\": \"preserve_accept_header\",\r\n         \"id\": \"3776b215-b3bc-40b6-bdcb-06efa7de64be\",\r\n         \"type\": \"in\"\r\n      },\r\n            {\r\n         \"name\": \"xml_to_json_in_message\",\r\n         \"id\": \"50ac2002-769e-4f90-8549-6d0248dff7d2\",\r\n         \"type\": \"in\"\r\n      },\r\n            {\r\n         \"name\": \"xml_to_json_out_message\",\r\n         \"id\": \"2af75853-ed75-4d25-81aa-0ebbeca691ea\",\r\n         \"type\": \"out\"\r\n      },\r\n            {\r\n         \"name\": \"json_to_xml_out_message\",\r\n         \"id\": \"d9fa3ffc-f6b6-4171-ab97-eb44196cb66e\",\r\n         \"type\": \"out\"\r\n      },\r\n            {\r\n         \"name\": \"debug_out_flow\",\r\n         \"id\": \"260b7701-4071-46bd-9b66-900ac6fffed6\",\r\n         \"type\": \"out\"\r\n      },\r\n            {\r\n         \"name\": \"apply_accept_header\",\r\n         \"id\": \"15c17c2f-33e3-4c37-a262-04dfa49983a4\",\r\n         \"type\": \"out\"\r\n      },\r\n            {\r\n         \"name\": \"log_out_message\",\r\n         \"id\": \"d37dca41-c048-492a-82cf-9a2292c6fff0\",\r\n         \"type\": \"out\"\r\n      }\r\n   ]\r\n}"
      }
    },
    "/mediation-policies/{mediationPolicyId}/content": {
      "get": {
        "tags": [
          "Global Mediation Policy"
        ],
        "summary": "Downloadt specific global mediation policy",
        "description": "This operation can be used to download a particular global mediation policy.\n",
        "operationId": "getGlobalMediationPolicyContent",
        "parameters": [
          {
            "name": "mediationPolicyId",
            "in": "path",
            "description": "Mediation policy Id\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nMediation policy returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested file does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ]
      }
    },
    "/apis/{apiId}/client-certificates": {
      "get": {
        "tags": [
          "Client Certificates"
        ],
        "summary": "Retrieve/ Search uploaded Client Certificates.",
        "description": "This operation can be used to retrieve and search the uploaded client certificates.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum size of resource array to return.\n",
            "required": false,
            "type": "integer",
            "default": 25
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting point within the complete list of items qualified.\n",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "alias",
            "in": "query",
            "description": "Alias for the client certificate",
            "required": false,
            "type": "string"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "UUID of the API",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Successful response with the list of matching certificate information in the body.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/ClientCertificates",
              "originalRef": "#/definitions/ClientCertificates"
            },
            "responseSchema": {
              "$ref": "#/definitions/ClientCertificates",
              "originalRef": "#/definitions/ClientCertificates"
            }
          },
          "400": {
            "description": "Bad Request.\nFailure due to not providing alias or server is not configured to support mutual SSL authentication.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:client_certificates_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -X GET https://localhost:9443/api/am/publisher/v1/client-certificates -H 'authorization: Bearer f80b8c34-01bc-3ac2-99b6-4873e45c861c'",
        "x-wso2-request": "GET https://localhost:9443/api/am/publisher/v1/client-certificates  -H 'authorization: Bearer f80b8c34-01bc-3ac2-99b6-4873e45c861c'",
        "x-wso2-response": "HTTP/1.1 200 OK {\"count\":1,\"next\":\"\",\"previous\":\"\",\"certificates\":[{\"alias\":\"newtest1\", \"apiId\":\"admin-mesting12da1-1.0.0\",\"tier\":\"Bronze\"}],\"pagination\":{\"total\":1, \"offset\":0,\"limit\":25}}"
      },
      "post": {
        "tags": [
          "Client Certificates"
        ],
        "summary": "Upload a new certificate.",
        "description": "This operation can be used to upload a new certificate for an endpoint.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "certificate",
            "in": "formData",
            "description": "The certificate that needs to be uploaded.",
            "required": true,
            "type": "file"
          },
          {
            "name": "alias",
            "in": "formData",
            "description": "Alias for the certificate",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "apiId to which the certificate should be applied.",
            "required": true,
            "type": "string"
          },
          {
            "name": "tier",
            "in": "formData",
            "description": "apiId to which the certificate should be applied.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nThe Certificate added successfully.\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created resource.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/ClientCertMetadata",
              "originalRef": "#/definitions/ClientCertMetadata"
            },
            "responseSchema": {
              "$ref": "#/definitions/ClientCertMetadata",
              "originalRef": "#/definitions/ClientCertMetadata"
            }
          },
          "400": {
            "description": "Bad Request.\nFailures due to existing alias or expired certificate.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error\nFailed to add the Certificate due to an Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:client_certificates_add"
            ]
          }
        ],
        "x-wso2-curl": "curl -X POST https://localhost:9443/api/am/publisher/v1/client-certificates -H 'authorization: Bearer f2f562bd-f6d9-3fad-b48d-72ab5702c98a' -H 'content-type: multipart/form-data' -F certificate=@test.crt -F alias=alias -F apiId=fea749dd-d548-4a8b-b308-34903b39a34b -F tier=Gold",
        "x-wso2-request": "POST https://localhost:9443/api/am/publisher/v1/client-certificates -H 'authorization: Bearer f2f562bd-f6d9-3fad-b48d-72ab5702c98a' -H 'content-type: multipart/form-data' -F certificate=@test.crt -F alias=alias -F apiId=fea749dd-d548-4a8b-b308-34903b39a34b -F tier=Gold",
        "x-wso2-response": "HTTP/1.1 201 Created Location: https://localhost:9443/api/am/publisher/v1/client-certificates?alias=newtest1 Date: Tue, 09 Oct 2018 16:18:10 GMT Content-Type: application/json Transfer-Encoding: chunked Server: WSO2 Carbon Server {\"alias\":\"alias\",\"apiId\":\"fea749dd-d548-4a8b-b308-34903b39a34b\",\"tier\":\"Gold\"}"
      }
    },
    "/apis/{apiId}/client-certificates/{alias}": {
      "get": {
        "tags": [
          "Client Certificates"
        ],
        "summary": "Get the certificate information.",
        "description": "This operation can be used to get the information about a certificate.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "The api identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/CertificateInfo",
              "originalRef": "#/definitions/CertificateInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/CertificateInfo",
              "originalRef": "#/definitions/CertificateInfo"
            }
          },
          "400": {
            "description": "Bad Request.\nAlias not found or server is not configured to support mutual SSL authentication.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nAlias not found\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:client_certificates_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -X GET https://localhost:9443/api/am/publisher/v1/client-certificates/newtest1 -H 'authorization: Bearer f80b8c34-01bc-3ac2-99b6-4873e45c861c'",
        "x-wso2-request": "GET https://apis.wso2.com/api/am/publisher/v1/client-certificates/newtest1 Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8",
        "x-wso2-response": "HTTP/1.1 200 OK Date: Tue, 09 Oct 2018 16:25:43 GMT Content-Type: application/json Transfer-Encoding: chunked Server: WSO2 Carbon Server {\"status\":\"Active\",\"validity\":{\"from\":\"Fri Sep 14 15:46:22 IST 2018\",\"to\":\"Sat Sep 14 15:46:22 IST 2019\"},\"version\":\"3\",\"subject\":\"EMAILADDRESS=wso2@wso2.com, CN=WSO2, OU=test, O=WSO2, L=colombo, ST=Some-State, C=CA\"}"
      },
      "put": {
        "tags": [
          "Client Certificates"
        ],
        "summary": "Update a certificate.",
        "description": "This operation can be used to update an uploaded certificate.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "certificate",
            "in": "formData",
            "description": "The certificate that needs to be uploaded.",
            "required": false,
            "type": "file"
          },
          {
            "name": "alias",
            "in": "path",
            "description": "Alias for the certificate",
            "required": true,
            "type": "string"
          },
          {
            "name": "tier",
            "in": "formData",
            "description": "The tier of the certificate",
            "required": false,
            "type": "string"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "The api identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nThe Certificate updated successfully.\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created resource.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/ClientCertMetadata",
              "originalRef": "#/definitions/ClientCertMetadata"
            },
            "responseSchema": {
              "$ref": "#/definitions/ClientCertMetadata",
              "originalRef": "#/definitions/ClientCertMetadata"
            }
          },
          "400": {
            "description": "Bad Request.\nFailure due to not providing alias.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nUpdating certificate failed. Alias not found or server is not configured to support mutual SSL\nauthentication.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:client_certificates_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -X PUT https://localhost:9443/api/am/publisher/v1/client-certificates/newtest1 -H 'authorization: Bearer f80b8c34-01bc-3ac2-99b6-4873e45c861c' -F tier=Bronze",
        "x-wso2-request": "PUT https://localhost:9443/api/am/publisher/v1/client-certificates/newtest1 -H 'authorization: Bearer f80b8c34-01bc-3ac2-99b6-4873e45c861c' -F tier=Bronze",
        "x-wso2-response": "HTTP/1.1 200 OK\r\n {\r\n\"alias\":\"newtest1\",\r\n\"apiId\":\"fea749dd-d548-4a8b-b308-34903b39a34b\",\r\n \"tier\":\"Gold\"\r\n}\r\n"
      },
      "delete": {
        "tags": [
          "Client Certificates"
        ],
        "summary": "Delete a certificate.",
        "description": "This operation can be used to delete an uploaded certificate.\n",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "The alias of the certificate that should be deleted.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "The api identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nThe Certificate deleted successfully.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            }
          },
          "400": {
            "description": "Bad Request.\nAlias not found or server is not configured to support mutual SSL authentication.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found. |\nFailed to delete the certificate. Certificate could not found for\nthe given alias\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:client_certificates_update"
            ]
          }
        ],
        "x-wso2-curl": "curl -X DELETE https://localhost:9443/api/am/publisher/v1/client-certificates/newtest1 -H 'authorization: Bearer f80b8c34-01bc-3ac2-99b6-4873e45c861c' ",
        "x-wso2-request": "DELETE https://localhost:9443/api/am/publisher/v1/client-certificates/newtest1 -H 'authorization: Bearer f80b8c34-01bc-3ac2-99b6-4873e45c861c'",
        "x-wso2-response": "HTTP/1.1 200 OK"
      }
    },
    "/apis/{apiId}/client-certificates/{alias}/content": {
      "get": {
        "tags": [
          "Client Certificates"
        ],
        "summary": "Download a certificate.",
        "description": "This operation can be used to download a certificate which matches the given alias.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "description": "The api identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "alias",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            }
          },
          "400": {
            "description": "Bad Request.\nAlias not provided or server is not configured to support mutual SSL authentication.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found. Certificate for the Alias not found.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:client_certificates_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -X GET https://localhost:9443/api/am/publisher/v1/client-certificates/newtest1/content -H 'authorization: Bearer f80b8c34-01bc-3ac2-99b6-4873e45c861c'",
        "x-wso2-request": "GET https://apis.wso2.com/api/am/publisher/v1/certificates/wso2carbon/content Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8",
        "x-wso2-response": "HTTP/1.1 200 OK Content-Disposition: attachment; filename=\"newtest1.crt\" Date: Tue, 09 Oct 2018 16:21:25 GMT Content-Type: application/octet-stream Content-Length: 997 Server: WSO2 Carbon Server"
      }
    },
    "/endpoint-certificates": {
      "get": {
        "tags": [
          "Endpoint Certificates"
        ],
        "summary": "Retrieve/Search uploaded certificates.",
        "description": "This operation can be used to retrieve and search the uploaded certificates.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum size of resource array to return.\n",
            "required": false,
            "type": "integer",
            "default": 25
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting point within the complete list of items qualified.\n",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "alias",
            "in": "query",
            "description": "Alias for the certificate",
            "required": false,
            "type": "string"
          },
          {
            "name": "endpoint",
            "in": "query",
            "description": "Endpoint of which the certificate is uploaded",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Successful response with the list of matching certificate information in the body.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/Certificates",
              "originalRef": "#/definitions/Certificates"
            },
            "responseSchema": {
              "$ref": "#/definitions/Certificates",
              "originalRef": "#/definitions/Certificates"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:ep_certificates_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -X GET -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -H \"Content-Type: application/json\" \"https://localhost:9443/api/am/publisher/v1/certificates\"",
        "x-wso2-request": "GET https://localhost:9443/api/am/publisher/v1/certificates?alias=wso2carbon&endpoint=https://www.abc.com",
        "x-wso2-response": "HTTP/1.1 200 OK \n\n{\n  \"count\":1,\n  \"next\":\"\",\n  \"previous\":\"\",\n\"certificates\":[\n   {\n    \"alias\":\"wso2carbon\",\n    \"endpoint\":\"https://www.abc.com\"\n   }\n],\n  \"pagination\":{\n    \"total\":1,\n          \"offset\":0,\n          \"limit\":25\n   } \n}"
      },
      "post": {
        "tags": [
          "Endpoint Certificates"
        ],
        "summary": "Upload a new Certificate.",
        "description": "This operation can be used to upload a new certificate for an endpoint.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "certificate",
            "in": "formData",
            "description": "The certificate that needs to be uploaded.",
            "required": true,
            "type": "file"
          },
          {
            "name": "alias",
            "in": "formData",
            "description": "Alias for the certificate",
            "required": true,
            "type": "string"
          },
          {
            "name": "endpoint",
            "in": "formData",
            "description": "Endpoint to which the certificate should be applied.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nThe Certificate added successfully.\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created resource.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/CertMetadata",
              "originalRef": "#/definitions/CertMetadata"
            },
            "responseSchema": {
              "$ref": "#/definitions/CertMetadata",
              "originalRef": "#/definitions/CertMetadata"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n* Failures due to existing alias or expired certificate.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error\n* Failed to add the Certificate due to an Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:ep_certificates_add"
            ]
          }
        ],
        "x-wso2-curl": "curl -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -H \"Content-Type: multipart/form-data\"  -F \"certificate=@/home/user/wso2carbon.cert\" -F \"alias=wso2carbon\" -F \"endpoint=https://www.abc.com\" \"https://localhost:9443/api/am/publisher/v1/certificates/certificate\"",
        "x-wso2-request": "POST https://localhost:9443/api/am/publisher/v1/certificates/certificate \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -F \"certificate=/home/user/wso2carbon.cert\" -F \"alias=wso2carbon\" -F \"endpoint=https://www.abc.com\"",
        "x-wso2-response": "HTTP/1.1 201 Created Location: https://localhost:9443/api/am/publisher/v1/client-certificates?alias=newtest1 Date: Fri, 05 Oct 2018 09:50:48 GMT Content-Type: application/json Transfer-Encoding: chunked Server: WSO2 Carbon Server {\"alias\": \"newtest1\",\"apiId\": \"4624bdfb-6acd-465a-8454-bac9c4c94d88\",\"tier\": \"Gold\"}"
      }
    },
    "/endpoint-certificates/{alias}": {
      "get": {
        "tags": [
          "Endpoint Certificates"
        ],
        "summary": "Get the certificate information.",
        "description": "This operation can be used to get the information about a certificate.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/CertificateInfo",
              "originalRef": "#/definitions/CertificateInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/CertificateInfo",
              "originalRef": "#/definitions/CertificateInfo"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nAlias not found\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:ep_certificates_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -X GET \"https://apis.wso2.com/api/am/publisher/v1/certificates/wso2carbon\" -H  \"accept: application/json\"",
        "x-wso2-request": "GET https://apis.wso2.com/api/am/publisher/v1/certificates/wso2carbon Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8",
        "x-wso2-response": "HTTP/1.1 200 OK \nContent-Type: application/json\r\n {\n  \"status\":\"Active\",\n  \"validity\":{\n    \"from\":\"Fri May 04 19:01:01 IST 2018\",\n    \"to\":\"Thu Aug 02 19:01:01 IST 2018\"\n  }\n,  \"version\":\"3\",\n  \"subject\":\"CN=wso2.com, OU=wso2, O=wso2, L=Colombo, ST=Western, C=LK\"\n}"
      },
      "put": {
        "tags": [
          "Endpoint Certificates"
        ],
        "summary": "Update a certificate.",
        "description": "This operation can be used to update an uploaded certificate.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "certificate",
            "in": "formData",
            "description": "The certificate that needs to be uploaded.",
            "required": true,
            "type": "file"
          },
          {
            "name": "alias",
            "in": "path",
            "description": "Alias for the certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nThe Certificate updated successfully.\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created resource.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/CertMetadata",
              "originalRef": "#/definitions/CertMetadata"
            },
            "responseSchema": {
              "$ref": "#/definitions/CertMetadata",
              "originalRef": "#/definitions/CertMetadata"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nUpdating certificate failed. Alias not found\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:ep_certificates_update"
            ]
          }
        ],
        "x-wso2-curl": "curl -X PUT -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -H \"Content-Type:multipart/form-data\" -F \"certificate=@/home/user/wso2carbon.cert\" \"https://localhost:9443/api/am/publisher/v1/certificates/wso2carbon\"",
        "x-wso2-request": "PUT https://localhost:9443/api/am/publisher/v1/certificates/wso2carbon Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8 -F  \"certificate=@/home/user/wso2carbon.cert\"",
        "x-wso2-response": "HTTP/1.1 200 OK\r\n {\"alias\":wso2carbon,\"endpoint\":\"https://www.abc.com\"}"
      },
      "delete": {
        "tags": [
          "Endpoint Certificates"
        ],
        "summary": "Delete a certificate.",
        "description": "This operation can be used to delete an uploaded certificate.\n",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "The alias of the certificate that should be deleted.\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nThe Certificate deleted successfully.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            }
          },
          "400": {
            "description": "Bad Request.\n\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found. |\nFailed to delete the certificate. Certificate could not found for\nthe given alias\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:ep_certificates_update"
            ]
          }
        ],
        "x-wso2-curl": "curl -X DELETE -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" \"https://localhost:9443/api/am/publisher/v1/certificates/wso2carbon\"",
        "x-wso2-request": "DELETE https://localhost:9443/api/am/publisher/v1/certificates/wso2carbon Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8",
        "x-wso2-response": "HTTP/1.1 200 OK"
      }
    },
    "/endpoint-certificates/{alias}/content": {
      "get": {
        "tags": [
          "Endpoint Certificates"
        ],
        "summary": "Download a certificate.",
        "description": "This operation can be used to download a certificate which matches the given alias.\n",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n*\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found. Certificate for the Alias not found.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:ep_certificates_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -X GET \"https://apis.wso2.com/api/am/publisher/v1/certificates/wso2carbon/content\" -H \"accept: application/json\"",
        "x-wso2-request": "GET https://apis.wso2.com/api/am/publisher/v1/certificates/wso2carbon/content Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8",
        "x-wso2-response": "HTTP/1.1 200 OK\r\n [content of the certificate]"
      }
    },
    "/search": {
      "get": {
        "tags": [
          "Unified Search"
        ],
        "summary": "Retrieve/Search APIs and API Documents by content\n",
        "description": "This operation provides you a list of available APIs and API Documents qualifying the given keyword match.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum size of resource array to return.\n",
            "required": false,
            "type": "integer",
            "default": 25
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting point within the complete list of items qualified.\n",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "query",
            "in": "query",
            "description": "**Search**.\n\nYou can search by proving a keyword.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nList of qualifying APIs and API documents is returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body."
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/SearchResultList",
              "originalRef": "#/definitions/SearchResultList"
            },
            "responseSchema": {
              "$ref": "#/definitions/SearchResultList",
              "originalRef": "#/definitions/SearchResultList"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ]
      }
    },
    "/api-products": {
      "get": {
        "tags": [
          "API Products"
        ],
        "summary": "Retrieve/Search API Products\n",
        "description": "This operation provides you a list of available API Products qualifying under a given search condition.\n\nEach retrieved API Product is represented with a minimal amount of attributes. If you want to get complete details of an API Product, you need to use **Get details of an API Product** operation.\n",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum size of resource array to return.\n",
            "required": false,
            "type": "integer",
            "default": 25
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting point within the complete list of items qualified.\n",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "query",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Media types acceptable for the response. Default is application/json.\n",
            "required": false,
            "type": "string",
            "default": "application/json"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nList of qualifying API Products is returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body."
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/APIProductList",
              "originalRef": "#/definitions/APIProductList"
            },
            "responseSchema": {
              "$ref": "#/definitions/APIProductList",
              "originalRef": "#/definitions/APIProductList"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "API Products"
        ],
        "summary": "Create a new API Product",
        "description": "This operation can be used to create a new API Product specifying the details of the API Product in the payload.\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "API object that needs to be added\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIProduct",
              "originalRef": "#/definitions/APIProduct"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created.\nSuccessful response with the newly created object as entity in the body.\nLocation header contains URL of newly created entity.\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created resource.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/APIProduct",
              "originalRef": "#/definitions/APIProduct"
            },
            "responseSchema": {
              "$ref": "#/definitions/APIProduct",
              "originalRef": "#/definitions/APIProduct"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type.\nThe entity of the request was in a not supported format.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ]
      }
    },
    "/api-products/{apiProductId}": {
      "get": {
        "tags": [
          "API Products"
        ],
        "summary": "Get details of an API Product",
        "description": "Using this operation, you can retrieve complete details of a single API Product. You need to provide the Id of the API to retrive it.\n",
        "parameters": [
          {
            "name": "apiProductId",
            "in": "path",
            "description": "**API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.\n",
            "required": true,
            "type": "string",
            "x-encoded": true
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Media types acceptable for the response. Default is application/json.\n",
            "required": false,
            "type": "string",
            "default": "application/json"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nRequested API Product is returned\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/APIProduct",
              "originalRef": "#/definitions/APIProduct"
            },
            "responseSchema": {
              "$ref": "#/definitions/APIProduct",
              "originalRef": "#/definitions/APIProduct"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested API does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "API Products"
        ],
        "summary": "Update an API product",
        "description": "This operation can be used to update an existing API product.\nBut the properties `name`, `provider`\n",
        "parameters": [
          {
            "name": "apiProductId",
            "in": "path",
            "description": "**API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.\n",
            "required": true,
            "type": "string",
            "x-encoded": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "API object that needs to be added\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIProduct",
              "originalRef": "#/definitions/APIProduct"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nSuccessful response with updated API product object\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the newly created resource.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/APIProduct",
              "originalRef": "#/definitions/APIProduct"
            },
            "responseSchema": {
              "$ref": "#/definitions/APIProduct",
              "originalRef": "#/definitions/APIProduct"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden.\nThe request must be conditional but no condition has been specified.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nThe resource to be updated does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "API Products"
        ],
        "summary": "Delete an API Product",
        "description": "This operation can be used to delete an existing API Product proving the Id of the API Product.\n",
        "parameters": [
          {
            "name": "apiProductId",
            "in": "path",
            "description": "**API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.\n",
            "required": true,
            "type": "string",
            "x-encoded": true
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nResource successfully deleted.\n"
          },
          "403": {
            "description": "Forbidden.\nThe request must be conditional but no condition has been specified.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nResource to be deleted does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ]
      }
    },
    "/api-products/{apiProductId}/thumbnail": {
      "get": {
        "tags": [
          "API Products"
        ],
        "summary": "Get thumbnail image",
        "description": "This operation can be used to download a thumbnail image of an API product.\n",
        "parameters": [
          {
            "name": "apiProductId",
            "in": "path",
            "description": "**API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.\n",
            "required": true,
            "type": "string",
            "x-encoded": true
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Media types acceptable for the response. Default is application/json.\n",
            "required": false,
            "type": "string",
            "default": "application/json"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nThumbnail image returned\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested Document does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "API Products"
        ],
        "summary": "Upload a thumbnail image",
        "description": "This operation can be used to upload a thumbnail image of an API Product. The thumbnail to be uploaded should be given as a form data parameter `file`.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "apiProductId",
            "in": "path",
            "description": "**API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.\n",
            "required": true,
            "type": "string",
            "x-encoded": true
          },
          {
            "name": "file",
            "in": "formData",
            "description": "Image to upload",
            "required": true,
            "type": "file"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nImage updated\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the uploaded thumbnail image of the API Product.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/FileInfo",
              "originalRef": "#/definitions/FileInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FileInfo",
              "originalRef": "#/definitions/FileInfo"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nThe resource to be updated does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ]
      }
    },
    "/api-products/{apiProductId}/swagger": {
      "get": {
        "tags": [
          "API Products"
        ],
        "summary": "Get swagger definition",
        "description": "This operation can be used to retrieve the swagger definition of an API.\n",
        "parameters": [
          {
            "name": "apiProductId",
            "in": "path",
            "description": "**API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.\n",
            "required": true,
            "type": "string",
            "x-encoded": true
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Media types acceptable for the response. Default is application/json.\n",
            "required": false,
            "type": "string",
            "default": "application/json"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nRequested swagger document of the API is returned\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested API does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ]
      }
    },
    "/api-products/{apiProductId}/is-outdated": {
      "get": {
        "tags": [
          "API Products"
        ],
        "summary": "Get if API Product is outdated",
        "description": "This operation can be used to retrieve the status indicating if an API Product is outdated due to updating of dependent APIs\n",
        "parameters": [
          {
            "name": "apiProductId",
            "in": "path",
            "description": "**API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.\n",
            "required": true,
            "type": "string",
            "x-encoded": true
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Media types acceptable for the response. Default is application/json.\n",
            "required": false,
            "type": "string",
            "default": "application/json"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nRequested swagger document of the API is returned\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/APIProductOutdatedStatus",
              "originalRef": "#/definitions/APIProductOutdatedStatus"
            },
            "responseSchema": {
              "$ref": "#/definitions/APIProductOutdatedStatus",
              "originalRef": "#/definitions/APIProductOutdatedStatus"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested API does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ]
      }
    },
    "/api-products/{apiProductId}/documents": {
      "get": {
        "tags": [
          "API Product Documents"
        ],
        "summary": "Get a list of documents of an API Product",
        "description": "This operation can be used to retrive a list of documents belonging to an API Product by providing the id of the API Product.\n",
        "parameters": [
          {
            "name": "apiProductId",
            "in": "path",
            "description": "**API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.\n",
            "required": true,
            "type": "string",
            "x-encoded": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum size of resource array to return.\n",
            "required": false,
            "type": "integer",
            "default": 25
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting point within the complete list of items qualified.\n",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Media types acceptable for the response. Default is application/json.\n",
            "required": false,
            "type": "string",
            "default": "application/json"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nDocument list is returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/DocumentList",
              "originalRef": "#/definitions/DocumentList"
            },
            "responseSchema": {
              "$ref": "#/definitions/DocumentList",
              "originalRef": "#/definitions/DocumentList"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested API Product does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" \"https://localhost:9443/api/am/publisher/v1/api-products/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents\"",
        "x-wso2-request": "GET https://localhost:9443/api/am/publisher/v1/api-products/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n   \"previous\": \"\",\n   \"list\":    [\n            {\n         \"visibility\": \"API_LEVEL\",\n         \"sourceType\": \"INLINE\",\n         \"sourceUrl\": null,\n         \"otherTypeName\": null,\n         \"documentId\": \"0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\",\n         \"summary\": \"This is a sample documentation for v1.0\",\n         \"name\": \"PhoneVerification API Documentation\",\n         \"type\": \"HOWTO\"\n      },\n            {\n         \"visibility\": \"API_LEVEL\",\n         \"sourceType\": \"URL\",\n         \"sourceUrl\": \"http://wiki.cdyne.com/index.php/Phone_Verification\",\n         \"otherTypeName\": null,\n         \"documentId\": \"4145df31-04f1-440c-8d08-68952874622c\",\n         \"summary\": \"This is the URL for online documentation\",\n         \"name\": \"Online Documentation\",\n         \"type\": \"SAMPLES\"\n      }\n   ],\n   \"next\": \"\",\n   \"count\": 2\n}"
      },
      "post": {
        "tags": [
          "API Product Documents"
        ],
        "summary": "Add a new document to an API Product",
        "description": "This operation can be used to add a new documentation to an API Product. This operation only adds the metadata of a document. To add the actual content we need to use **Upload the content of an API Product document ** API once we obtain a document Id by this operation.\n",
        "parameters": [
          {
            "name": "apiProductId",
            "in": "path",
            "description": "**API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.\n",
            "required": true,
            "type": "string",
            "x-encoded": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "Document object that needs to be added\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created.\nSuccessful response with the newly created Document object as entity in the body.\nLocation header contains URL of newly added document.\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location to the newly created Document.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            },
            "responseSchema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "415": {
            "description": "Unsupported media type.\nThe entity of the request was in a not supported format.\n\n######################################################\n"
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -H \"Content-Type: application/json\" -X POST -d @data.json \"https://localhost:9443/api/am/publisher/v1/api-products/96077508-fd01-4fae-bc64-5de0e2baf43c/documents\"",
        "x-wso2-request": "POST https://localhost:9443/api/am/publisher/v1/api-products/96077508-fd01-4fae-bc64-5de0e2baf43c/documents\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\nContent-Type: application/json\n\n{\n    \"visibility\": \"API_LEVEL\",\n    \"sourceType\": \"INLINE\",\n    \"sourceUrl\": null,\n    \"otherTypeName\": null,\n    \"summary\": \"This is a sample documentation\",\n    \"name\": \"Introduction to PhoneVerification API\",\n    \"type\": \"HOWTO\"\n}",
        "x-wso2-response": "HTTP/1.1 201 Created\nLocation: https://localhost:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents/ffd5790d-b7a9-4cb6-b76a-f8b83ecdd058\nContent-Type: application/json\n\n{\n   \"visibility\": \"API_LEVEL\",\n   \"sourceType\": \"INLINE\",\n   \"sourceUrl\": null,\n   \"otherTypeName\": null,\n   \"documentId\": \"ffd5790d-b7a9-4cb6-b76a-f8b83ecdd058\",\n   \"summary\": \"This is a sample documentation\",\n   \"name\": \"Introduction to PhoneVerification API\",\n   \"type\": \"HOWTO\"\n}"
      }
    },
    "/api-products/{apiProductId}/documents/{documentId}": {
      "get": {
        "tags": [
          "API Product Documents"
        ],
        "summary": "Get a document of an API",
        "description": "This operation can be used to retrieve a particular document's metadata associated with an API.\n",
        "parameters": [
          {
            "name": "apiProductId",
            "in": "path",
            "description": "**API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.\n",
            "required": true,
            "type": "string",
            "x-encoded": true
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document Identifier\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Media types acceptable for the response. Default is application/json.\n",
            "required": false,
            "type": "string",
            "default": "application/json"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nDocument returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            },
            "responseSchema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested Document does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" \"https://localhost:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents/0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\"",
        "x-wso2-request": "GET https://localhost:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents/0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n   \"visibility\": \"API_LEVEL\",\n   \"sourceType\": \"INLINE\",\n   \"sourceUrl\": null,\n   \"otherTypeName\": null,\n   \"documentId\": \"0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\",\n   \"summary\": \"This is a sample documentation\",\n   \"name\": \"PhoneVerification API Documentation\",\n   \"type\": \"HOWTO\"\n}"
      },
      "put": {
        "tags": [
          "API Product Documents"
        ],
        "summary": "Update a document of an API Product",
        "description": "This operation can be used to update metadata of an API's document.\n",
        "parameters": [
          {
            "name": "apiProductId",
            "in": "path",
            "description": "**API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.\n",
            "required": true,
            "type": "string",
            "x-encoded": true
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document Identifier\n",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Document object that needs to be added\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nDocument updated\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the updated document.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            },
            "responseSchema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nThe resource to be updated does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization:Bearer b0982cd2aacd463ff5f63cd5ebe58f4a\" -H \"Content-Type: application/json\" -X PUT -d data.json \"https://localhost:9443/api/am/publisher/v1/apis/96077508-fd01-4fae-bc64-5de0e2baf43c/documents/0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\"",
        "x-wso2-request": "PUT https://localhost:9443/api/am/publisher/v1/apis/96077508-fd01-4fae-bc64-5de0e2baf43c/documents/0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\nAuthorization:Bearer b0982cd2aacd463ff5f63cd5ebe58f4a\nContent-Type: application/json\n\n{\n   \"visibility\": \"API_LEVEL\",\n   \"sourceType\": \"INLINE\",\n   \"sourceUrl\": null,\n   \"otherTypeName\": null,\n   \"documentId\": \"0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\",\n   \"summary\": \"This is a sample documentation for v1.0\",\n   \"name\": \"PhoneVerification API Documentation\",\n   \"type\": \"HOWTO\"\n}",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n   \"visibility\": \"API_LEVEL\",\n   \"sourceType\": \"INLINE\",\n   \"sourceUrl\": null,\n   \"otherTypeName\": null,\n   \"documentId\": \"0bcb7f05-599d-4e1a-adce-5cb89bfe58d5\",\n   \"summary\": \"This is a sample documentation for v1.0\",\n   \"name\": \"PhoneVerification API Documentation\",\n   \"type\": \"HOWTO\"\n}"
      },
      "delete": {
        "tags": [
          "API Product Documents"
        ],
        "summary": "Delete a document of an API Product",
        "description": "This operation can be used to delete a document associated with an API Product.\n",
        "parameters": [
          {
            "name": "apiProductId",
            "in": "path",
            "description": "**API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.\n",
            "required": true,
            "type": "string",
            "x-encoded": true
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document Identifier\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nResource successfully deleted.\n"
          },
          "404": {
            "description": "Not Found.\nResource to be deleted does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -X DELETE https://localhost:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents/ffd5790d-b7a9-4cb6-b76a-f8b83ecdd058",
        "x-wso2-request": "DELETE https://localhost:9443/api/am/publisher/v1/apis/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents/ffd5790d-b7a9-4cb6-b76a-f8b83ecdd058\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK"
      }
    },
    "/api-products/{apiProductId}/documents/{documentId}/content": {
      "get": {
        "tags": [
          "API Product Documents"
        ],
        "summary": "Get the content of an API Product document",
        "description": "This operation can be used to retrive the content of an API's document.\n\nThe document can be of 3 types. In each cases responses are different.\n\n1. **Inline type**:\n   The content of the document will be retrieved in `text/plain` content type\n\n   _Sample cURL_ : `curl -k -H \"Authorization:Bearer 579f0af4-37be-35c7-81a4-f1f1e9ee7c51\" -F inlineContent=@\"docs.txt\" -X POST \"https://localhost:9443/api/am/publisher/v1/apis/995a4972-3178-4b17-a374-756e0e19127c/documents/43c2bcce-60e7-405f-bc36-e39c0c5e189e/content`\n2. **FILE type**:\n   The file will be downloaded with the related content type (eg. `application/pdf`)\n3. **URL type**:\n    The client will recieve the URL of the document as the Location header with the response with - `303 See Other`\n",
        "parameters": [
          {
            "name": "apiProductId",
            "in": "path",
            "description": "**API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.\n",
            "required": true,
            "type": "string",
            "x-encoded": true
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document Identifier\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Media types acceptable for the response. Default is application/json.\n",
            "required": false,
            "type": "string",
            "default": "application/json"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nFile or inline content returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            }
          },
          "303": {
            "description": "See Other.\nSource can be retrived from the URL specified at the Location header.\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Source URL of the document.\n"
              }
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested Document does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization:Bearer b0982cd2aacd463ff5f63cd5ebe58f4a\" \"https://localhost:9443/api/am/publisher/v1/api-products/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents/daf732d3-bda2-46da-b381-2c39d901ea61/content\" > sample.pdf",
        "x-wso2-request": "GET https://localhost:9443/api/am/publisher/v1/api-products/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents/daf732d3-bda2-46da-b381-2c39d901ea61/content\nAuthorization:Bearer b0982cd2aacd463ff5f63cd5ebe58f4a\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Disposition: attachment; filename=\"sample.pdf\"\nContent-Type: application/octet-stream\nContent-Length: 7802\n\n%PDF-1.4\n%Ã¤Ã¼Ã¶ÃŸ\n2 0 obj\n<</Length 3 0 R/Filter/FlateDecode>>\nstream\n..\n>>\nstartxref\n7279\n%%EOF"
      },
      "post": {
        "tags": [
          "API Product Documents"
        ],
        "summary": "Upload the content of an API Product document",
        "description": "Thid operation can be used to upload a file or add inline content to an API Product document.\n\n**IMPORTANT:**\n* Either **file** or **inlineContent** form data parameters should be specified at one time.\n* Document's source type should be **FILE** in order to upload a file to the document using **file** parameter.\n* Document's source type should be **INLINE** in order to add inline content to the document using **inlineContent** parameter.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "apiProductId",
            "in": "path",
            "description": "**API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.\n",
            "required": true,
            "type": "string",
            "x-encoded": true
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document Identifier\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "Document to upload",
            "required": false,
            "type": "file"
          },
          {
            "name": "inlineContent",
            "in": "formData",
            "description": "Inline content of the document",
            "required": false,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nDocument updated\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the updated content of the document.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              },
              "Last-Modified": {
                "type": "string",
                "description": "Date and time the resource has been modifed the last time.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            },
            "responseSchema": {
              "$ref": "#/definitions/Document",
              "originalRef": "#/definitions/Document"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid request or validation error.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nThe resource to be updated does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed.\nThe request has not been performed because one of the preconditions is not met.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_publish"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization:Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -F file=@\"sample.pdf\" -X POST \"https://localhost:9443/api/am/publisher/v1/api-products/890a4f4d-09eb-4877-a323-57f6ce2ed79b/documents/daf732d3-bda2-46da-b381-2c39d901ea61/content\"",
        "x-wso2-request": "POST https://localhost:9443/api/am/publisher/v1/api-products/8848faaa-7fd1-478a-baa2-48a4ebb92c98/documents/b3a79270-02bb-4e39-9ac1-90ce8f6c84af/content\nAuthorization:Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\nContent-Length: 8004\nContent-Type: multipart/form-data; boundary=------------------------7b9a53f1ffa452b9\n\n--------------------------7b9a53f1ffa452b9\nContent-Disposition: form-data; name=\"file\"; filename=\"sample.pdf\"\nContent-Type: application/octet-stream\n\n[file content]\n\n--------------------------7b9a53f1ffa452b9--\n",
        "x-wso2-response": "HTTP/1.1 201 Created\nLocation: https://localhost:9443/api/am/publisher/v1/apis/8848faaa-7fd1-478a-baa2-48a4ebb92c98/documents/b3a79270-02bb-4e39-9ac1-90ce8f6c84af/content\nContent-Type: application/json\n\n{\n    \"visibility\":\"API_LEVEL\",\n    \"sourceType\":\"FILE\",\n    \"sourceUrl\":null,\n    \"otherTypeName\":null,\n    \"documentId\":\"daf732d3-bda2-46da-b381-2c39d901ea61\",\n    \"summary\":\"This is a sample documentation pdf\",\n    \"name\":\"Introduction to PhoneVerification API PDF\",\n    \"type\":\"HOWTO\"\n}"
      }
    },
    "/roles/{roleId}": {
      "head": {
        "tags": [
          "Roles"
        ],
        "summary": "Check given role name is already exist",
        "description": "Using this operation, user can check a given role name exists or not.\n",
        "operationId": "validateSystemRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The Base 64 URL encoded role name with domain. If the given role is in secondary user-store, role ID should be\nderived as Base64URLEncode({user-store-name}/{role-name}). If the given role is in PRIMARY user-store, role ID\ncan be derived as Base64URLEncode(role-name)\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Requested role name exists."
          },
          "404": {
            "description": "Not Found. Requested role name does not exist."
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create",
              "apim:api_publish"
            ]
          }
        ]
      }
    },
    "/me/roles/{roleId}": {
      "head": {
        "tags": [
          "Roles"
        ],
        "summary": "Validate whether the logged-in user has the given role",
        "description": "Using this operation, logged-in user can check whether he has given role.\n",
        "operationId": "validateUserRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The Base 64 URL encoded role name with domain. If the given role is in secondary user-store, role ID should be\nderived as Base64URLEncode({user-store-name}/{role-name}). If the given role is in PRIMARY user-store, role ID\ncan be derived as Base64URLEncode(role-name)\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Requested user has the role."
          },
          "404": {
            "description": "Not Found. Requested user does not have the role."
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_create"
            ]
          }
        ]
      }
    },
    "/external-stores": {
      "get": {
        "tags": [
          "External Stores"
        ],
        "summary": "Retrieve external store list to publish an API",
        "description": "Retrieve external stores list configured to publish an API\n",
        "operationId": "getAllExternalStores",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK.\nExternal Stores list returned\n",
            "schema": {
              "$ref": "#/definitions/ExternalStore",
              "originalRef": "#/definitions/ExternalStore"
            },
            "responseSchema": {
              "$ref": "#/definitions/ExternalStore",
              "originalRef": "#/definitions/ExternalStore"
            }
          },
          "500": {
            "description": "Error retrieving external stores",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ]
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Retreive publisher settings",
        "description": "Retreive publisher settings\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK.\nSettings returned\n",
            "schema": {
              "$ref": "#/definitions/Settings",
              "originalRef": "#/definitions/Settings"
            },
            "responseSchema": {
              "$ref": "#/definitions/Settings",
              "originalRef": "#/definitions/Settings"
            }
          },
          "404": {
            "description": "Not Found.\nRequested Settings does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:publisher_settings"
            ]
          }
        ]
      }
    },
    "/settings/gateway-environments": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get all gateway environments",
        "description": "This operation can be used to retrieve the list of gateway environments available.\n",
        "parameters": [
          {
            "name": "apiId",
            "in": "query",
            "description": "**API ID** consisting of the **UUID** of the API.\nThe combination of the provider of the API, name of the API and the version is also accepted as a valid API I.\nShould be formatted as **provider-name-version**.\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nEnvironment list is returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              },
              "ETag": {
                "type": "string",
                "description": "Entity Tag of the response resource.\nUsed by caches, or in conditional requests (Will be supported in future).\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/EnvironmentList",
              "originalRef": "#/definitions/EnvironmentList"
            },
            "responseSchema": {
              "$ref": "#/definitions/EnvironmentList",
              "originalRef": "#/definitions/EnvironmentList"
            }
          },
          "304": {
            "description": "Not Modified.\nEmpty body because the client has already the latest version of the requested resource (Will be supported in future).\n"
          },
          "404": {
            "description": "Not Found.\nRequested API does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ],
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" \"https://localhost:9443/api/am/publisher/v1/environments\"",
        "x-wso2-request": "GET https://localhost:9443/api/am/publisher/v1/environments\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-response": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n   \"list\": [   {\n      \"showInApiConsole\": true,\n      \"serverUrl\": \"https://localhost:9443/services/\",\n      \"endpoints\":       {\n         \"http\": \"http://localhost:8280\",\n         \"https\": \"https://localhost:8243\"\n      },\n      \"name\": \"Production and Sandbox\",\n      \"type\": \"hybrid\"\n   }],\n   \"count\": 1\n}"
      }
    },
    "/tenants": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get get tenants by state\n",
        "description": "This operation is to get tenants by state\n",
        "operationId": "getTenantsByState",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "description": "The state represents the current state of the tenant\n\nSupported states are [ active, inactive]\n",
            "required": false,
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum size of resource array to return.\n",
            "required": false,
            "type": "integer",
            "default": 25
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting point within the complete list of items qualified.\n",
            "required": false,
            "type": "integer",
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nTenant names returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/TenantList",
              "originalRef": "#/definitions/TenantList"
            },
            "responseSchema": {
              "$ref": "#/definitions/TenantList",
              "originalRef": "#/definitions/TenantList"
            }
          },
          "404": {
            "description": "Not Found.\nRequested application does not exist.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "406": {
            "description": "Not Acceptable.\nThe requested media type is not supported\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ]
      }
    },
    "/alert-types": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "Get the list of API Publisher alert types.\n",
        "description": "This operation is used to get the list of supportd alert types for the 'publisher' agent.\n",
        "operationId": "getPublisherAlertTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK.\nThe list of publisher alert types are returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/AlertTypesList",
              "originalRef": "#/definitions/AlertTypesList"
            },
            "responseSchema": {
              "$ref": "#/definitions/AlertTypesList",
              "originalRef": "#/definitions/AlertTypesList"
            }
          },
          "500": {
            "description": "Internal Server Error.\nAn internal server error occurred while retrieving the alert types.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:pub_alert_manage"
            ]
          }
        ]
      }
    },
    "/alert-subscriptions": {
      "get": {
        "tags": [
          "Alert Subscriptions"
        ],
        "summary": "Get the list of API Publisher alert types subscribed by the user.\n",
        "description": "This operation is used to get the list of subscribed alert types by the user.\n",
        "operationId": "getSubscribedAlertTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK.\nThe list of subscribed alert types are returned.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/AlertsInfo",
              "originalRef": "#/definitions/AlertsInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/AlertsInfo",
              "originalRef": "#/definitions/AlertsInfo"
            }
          },
          "500": {
            "description": "Internal Server Error\nAn error occurred while retrieving subscribed alert types by user.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:pub_alert_manage"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Alert Subscriptions"
        ],
        "summary": "Subscribe to the selected alert types by the user.\n",
        "description": "This operation is used to get the list of subscribed alert types by the user.\n",
        "operationId": "subscribeToAlerts",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The alerts list and the email list to subscribe.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlertsInfo",
              "originalRef": "#/definitions/AlertsInfo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK.\nSuccessful response with the newly subscribed alerts.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/AlertsInfoResponse",
              "originalRef": "#/definitions/AlertsInfoResponse"
            },
            "responseSchema": {
              "$ref": "#/definitions/AlertsInfoResponse",
              "originalRef": "#/definitions/AlertsInfoResponse"
            }
          },
          "400": {
            "description": "Bad Request.\nInvalid Request or request validation failure.\n"
          },
          "500": {
            "description": "Internal Server Error\nAn internal server error occurred while subscribing to alerts.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:pub_alert_manage"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Alert Subscriptions"
        ],
        "summary": "Unsubscribe user from all the alert types.\n",
        "description": "This operation is used to unsubscribe the respective user from all the alert types.\n",
        "operationId": "unsubscribeAllAlerts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK.\nThe user is unsubscribed from the alerts successfully.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            }
          },
          "500": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:pub_alert_manage"
            ]
          }
        ]
      }
    },
    "/alerts/{alertType}/configurations": {
      "get": {
        "tags": [
          "Alert Configuration"
        ],
        "summary": "Get all AbnormalRequestsPerMin alert configurations\n",
        "description": "This operation is used to get all configurations of the AbnormalRequestsPerMin alert type.\n",
        "operationId": "getAllAlertConfigs",
        "parameters": [
          {
            "name": "alertType",
            "in": "path",
            "description": "The alert type.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nThe store alert configuration.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the body.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/AlertConfigList",
              "originalRef": "#/definitions/AlertConfigList"
            },
            "responseSchema": {
              "$ref": "#/definitions/AlertConfigList",
              "originalRef": "#/definitions/AlertConfigList"
            }
          },
          "500": {
            "description": "Internal Server Error\nAn error occurred while retrieving subscribed alert types by user.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:pub_alert_manage"
            ]
          }
        ]
      }
    },
    "/alerts/{alertType}/configurations/{configurationId}": {
      "put": {
        "tags": [
          "Alert Configuration"
        ],
        "summary": "Add AbnormalRequestsPerMin alert configurations.\n",
        "description": "This operation is used to add configuration for the AbnormalRequestsPerMin alert type.\n",
        "operationId": "addAlertConfig",
        "parameters": [
          {
            "name": "alertType",
            "in": "path",
            "description": "The alert type.",
            "required": true,
            "type": "string"
          },
          {
            "name": "configurationId",
            "in": "path",
            "description": "The alert configuration id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Configuration for AbnormalRequestCount alert type",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlertConfigInfo",
              "originalRef": "#/definitions/AlertConfigInfo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created.\nSuccessful response with newly created object as entity.\nLocation header contains URL of newly created entity.\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the newly created entity.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/AlertConfig",
              "originalRef": "#/definitions/AlertConfig"
            },
            "responseSchema": {
              "$ref": "#/definitions/AlertConfig",
              "originalRef": "#/definitions/AlertConfig"
            }
          },
          "400": {
            "description": "Bad Request\nThe request parameters validation failed.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error\nAn error occurred while retrieving subscribed alert types by user.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:pub_alert_manage"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Alert Configuration"
        ],
        "summary": "Delete the selected configuration from AbnormalRequestsPerMin alert type.\n",
        "description": "This operation is used to delete configuration from the AbnormalRequestsPerMin alert type.\n",
        "operationId": "deleteAlertConfig",
        "parameters": [
          {
            "name": "alertType",
            "in": "path",
            "description": "The alert type.",
            "required": true,
            "type": "string"
          },
          {
            "name": "configurationId",
            "in": "path",
            "description": "The alert configuration id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nThe alert config is deleted successfully.\n"
          },
          "400": {
            "description": "Bad Request\nThe request parameters validation failed.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found.\nThe provided alert configuration is not found.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error\nAn error occurred while retrieving subscribed alert types by user.\n",
            "schema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            },
            "responseSchema": {
              "$ref": "#/definitions/Error",
              "originalRef": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:pub_alert_manage"
            ]
          }
        ]
      }
    },
    "/tenants/{tenantDomain}": {
      "head": {
        "tags": [
          "Tenants"
        ],
        "summary": "Check whether the given tenant already exists",
        "description": "Using this operation, user can check whether a given tenant exists or not.\n",
        "operationId": "getTenantExistence",
        "parameters": [
          {
            "name": "tenantDomain",
            "in": "path",
            "description": "The domain of a specific tenant\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Requested role name exists."
          },
          "404": {
            "description": "Not Found. Requested role name does not exist."
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "apim:api_view"
            ]
          }
        ]
      }
    },
    "/labels": {
      "get": {
        "tags": [
          "Label Collection"
        ],
        "summary": "Get all registered Labels",
        "description": "Get all registered Labels\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK.\nLabels returned\n",
            "schema": {
              "$ref": "#/definitions/LabelList",
              "originalRef": "#/definitions/LabelList"
            },
            "responseSchema": {
              "$ref": "#/definitions/LabelList",
              "originalRef": "#/definitions/LabelList"
            }
          }
        },
        "x-scope": "apim:api_view",
        "x-wso2-request": "GET https://localhost:9443/api/am/publisher/v1/labels\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" \"https://localhost:9443/api/am/publisher/v1/labels\"",
        "x-wso2-response": "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n  \"count\": 1,\r\n  \"list\": [\r\n\t{\r\n\t\"id\":\"d7cf8523-9180-4255-84fa-6cb171c1f779\",\r\n\t\"name\":\"internal\",\r\n\t\"description\":\"label used for internal purpose\",\r\n\t\"accessUrls\":[\r\n\t  \"https://localhost:9095\"\r\n         ]\r\n       }\r\n   ]\r\n}"
      }
    }
  },
  "securityDefinitions": {
    "OAuth2Security": {
      "type": "oauth2",
      "tokenUrl": "https://localhost:9443/token",
      "flow": "password",
      "scopes": {
        "openid": "Authorize access to user details",
        "apim:api_view": "View API",
        "apim:api_create": "Create API",
        "apim:api_delete": "Delete API",
        "apim:api_publish": "Publish API",
        "apim:subscription_view": "View Subscription",
        "apim:subscription_block": "Block Subscription",
        "apim:external_services_discover": "Discover External Services",
        "apim:threat_protection_policy_create": "Create threat protection policies",
        "apim:threat_protection_policy_manage": "Update and delete threat protection policies",
        "apim:document_create": "Create API documents",
        "apim:document_manage": "Update and delete API documents",
        "apim:mediation_policy_view": "View mediation policies",
        "apim:mediation_policy_create": "Create mediation policies",
        "apim:mediation_policy_manage": "Update and delete mediation policies",
        "apim:client_certificates_view": "View client certificates",
        "apim:client_certificates_add": "Add client certificates",
        "apim:client_certificates_update": "Update and delete client certificates",
        "apim:ep_certificates_view": "View backend endpoint certificates",
        "apim:ep_certificates_add": "Add backend endpoint certificates",
        "apim:ep_certificates_update": "Update and delete backend endpoint certificates",
        "apim:publisher_settings": "Retrieve store settings",
        "apim:pub_alert_manage": "Get/ subscribe/ configure publisher alerts."
      }
    }
  },
  "definitions": {
    "APIList": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1,
          "description": "Number of APIs returned.\n"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIInfo",
            "originalRef": "#/definitions/APIInfo"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination",
          "originalRef": "#/definitions/Pagination"
        }
      },
      "title": "API List"
    },
    "APIListExpanded": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1,
          "description": "Number of APIs returned.\n"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/API",
            "originalRef": "#/definitions/API"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination",
          "originalRef": "#/definitions/Pagination"
        }
      },
      "title": "API List"
    },
    "APIInfo": {
      "properties": {
        "id": {
          "type": "string",
          "example": "01234567-0123-0123-0123-012345678901"
        },
        "name": {
          "type": "string",
          "example": "CalculatorAPI"
        },
        "description": {
          "type": "string",
          "example": "A calculator API that supports basic operations"
        },
        "context": {
          "type": "string",
          "example": "CalculatorAPI"
        },
        "version": {
          "type": "string",
          "example": "1.0.0"
        },
        "provider": {
          "type": "string",
          "example": "admin",
          "description": "If the provider value is not given, the user invoking the API will be used as the provider.\n"
        },
        "type": {
          "type": "string",
          "example": "HTTP"
        },
        "lifeCycleStatus": {
          "type": "string",
          "example": "CREATED"
        },
        "workflowStatus": {
          "type": "string",
          "example": "APPROVED"
        },
        "hasThumbnail": {
          "type": "boolean",
          "example": true
        },
        "securityScheme": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "API Info object with basic API details."
    },
    "API": {
      "required": [
        "context",
        "name",
        "version"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "01234567-0123-0123-0123-012345678901",
          "description": "UUID of the api registry artifact\n"
        },
        "name": {
          "type": "string",
          "example": "CalculatorAPI"
        },
        "description": {
          "type": "string",
          "example": "A calculator API that supports basic operations"
        },
        "context": {
          "type": "string",
          "example": "CalculatorAPI"
        },
        "version": {
          "type": "string",
          "example": "1.0.0"
        },
        "provider": {
          "type": "string",
          "example": "admin",
          "description": "If the provider value is not given user invoking the api will be used as the provider.\n"
        },
        "lifeCycleStatus": {
          "type": "string",
          "example": "CREATED"
        },
        "wsdlInfo": {
          "type": "object",
          "description": "WSDL information of the API. This is only available if the API is a SOAP API.",
          "properties": {
            "type": {
              "type": "string",
              "description": "Indicates whether the WSDL is a single WSDL or an archive in ZIP format",
              "enum": [
                "WSDL",
                "ZIP"
              ]
            }
          }
        },
        "wsdlUrl": {
          "type": "string",
          "example": "/apimgt/applicationdata/wsdls/admin--soap1.wsdl"
        },
        "responseCachingEnabled": {
          "type": "boolean",
          "example": true
        },
        "cacheTimeout": {
          "type": "integer",
          "example": 300
        },
        "destinationStatsEnabled": {
          "type": "string",
          "example": "Disabled"
        },
        "hasThumbnail": {
          "type": "boolean",
          "example": true
        },
        "isDefaultVersion": {
          "type": "boolean",
          "example": false
        },
        "enableSchemaValidation": {
          "type": "boolean",
          "example": false
        },
        "type": {
          "type": "string",
          "example": "HTTP",
          "description": "The api creation type to be used. Accepted values are HTTP, WS, SOAPTOREST, GRAPHQL",
          "default": "HTTP",
          "enum": [
            "HTTP",
            "WS",
            "SOAPTOREST",
            "SOAP",
            "GRAPHQL"
          ]
        },
        "transport": {
          "type": "array",
          "example": [
            "http",
            "https"
          ],
          "description": "Supported transports for the API (http and/or https).\n",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "example": [
            "substract",
            "add"
          ],
          "items": {
            "type": "string"
          },
          "x-otherScopes": [
            "apim:api_publish"
          ]
        },
        "policies": {
          "type": "array",
          "example": [
            "Unlimited"
          ],
          "items": {
            "type": "string"
          },
          "x-otherScopes": [
            "apim:api_publish"
          ]
        },
        "apiThrottlingPolicy": {
          "type": "string",
          "example": "Unlimited",
          "description": "The API level throttling policy selected for the particular API",
          "x-otherScopes": [
            "apim:api_publish"
          ]
        },
        "authorizationHeader": {
          "type": "string",
          "description": "Name of the Authorization header used for invoking the API. If it is not set, Authorization header name specified\nin tenant or system level will be used.\n"
        },
        "securityScheme": {
          "type": "array",
          "description": "Types of API security, the current API secured with. It can be either OAuth2 or mutual SSL or both. If\nit is not set OAuth2 will be set as the security for the current API.\n",
          "items": {
            "type": "string"
          }
        },
        "maxTps": {
          "$ref": "#/definitions/APIMaxTps",
          "originalRef": "#/definitions/APIMaxTps"
        },
        "visibility": {
          "type": "string",
          "example": "PUBLIC",
          "description": "The visibility level of the API. Accepts one of the following. PUBLIC, PRIVATE, RESTRICTED.",
          "default": "PUBLIC",
          "enum": [
            "PUBLIC",
            "PRIVATE",
            "RESTRICTED"
          ],
          "x-otherScopes": [
            "apim:api_publish"
          ]
        },
        "visibleRoles": {
          "type": "array",
          "example": [],
          "description": "The user roles that are able to access the API in Store",
          "items": {
            "type": "string"
          },
          "x-otherScopes": [
            "apim:api_publish"
          ]
        },
        "visibleTenants": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "endpointSecurity": {
          "$ref": "#/definitions/APIEndpointSecurity",
          "originalRef": "#/definitions/APIEndpointSecurity"
        },
        "gatewayEnvironments": {
          "type": "array",
          "example": [
            "Production and Sandbox"
          ],
          "description": "List of gateway environments the API is available\n",
          "items": {
            "type": "string"
          },
          "x-otherScopes": [
            "apim:api_publish"
          ]
        },
        "labels": {
          "type": "array",
          "description": "Labels of micro-gateway environments attached to the API.\n",
          "items": {
            "type": "string",
            "example": ""
          }
        },
        "mediationPolicies": {
          "type": "array",
          "example": "\"mediationPolicies\": [ {\"name\": \"json_to_xml_in_message\",\"type\": \"in\"}, {\"name\": \"xml_to_json_out_message\",\"type\": \"out\"}, {\"name\": \"json_fault\",\"type\": \"fault\"} ],",
          "items": {
            "$ref": "#/definitions/MediationPolicy",
            "originalRef": "#/definitions/MediationPolicy"
          }
        },
        "subscriptionAvailability": {
          "type": "string",
          "example": "current_tenant",
          "description": "The subscription availability. Accepts one of the following. current_tenant, all_tenants or specific_tenants.",
          "default": "all_tenants",
          "enum": [
            "current_tenant",
            "all_tenants",
            "specific_tenants"
          ],
          "x-otherScopes": [
            "apim:api_publish"
          ]
        },
        "subscriptionAvailableTenants": {
          "type": "array",
          "example": [
            "tenant1",
            "tenant2"
          ],
          "items": {
            "type": "string"
          }
        },
        "additionalProperties": {
          "type": "object",
          "description": "Map of custom properties of API",
          "additionalProperties": {
            "type": "string"
          },
          "x-otherScopes": [
            "apim:api_publish"
          ]
        },
        "monetization": {
          "$ref": "#/definitions/APIMonetizationInfo",
          "originalRef": "#/definitions/APIMonetizationInfo"
        },
        "accessControl": {
          "type": "string",
          "description": "Is the API is restricted to certain set of publishers or creators or is it visible to all the\npublishers and creators. If the accessControl restriction is none, this API can be modified by all the\npublishers and creators, if not it can only be viewable/modifiable by certain set of publishers and creators,\n based on the restriction.\n",
          "default": "NONE",
          "enum": [
            "NONE",
            "RESTRICTED"
          ]
        },
        "accessControlRoles": {
          "type": "array",
          "example": [
            "admin"
          ],
          "description": "The user roles that are able to view/modify as API publisher or creator.",
          "items": {
            "type": "string"
          }
        },
        "businessInformation": {
          "x-otherScopes": [
            "apim:api_publish"
          ]
        },
        "corsConfiguration": {
          "$ref": "#/definitions/APICorsConfiguration",
          "originalRef": "#/definitions/APICorsConfiguration"
        },
        "workflowStatus": {
          "type": "string",
          "example": "APPROVED"
        },
        "createdTime": {
          "type": "string",
          "example": "2017-02-20T13:57:16.229+0000"
        },
        "lastUpdatedTime": {
          "type": "string",
          "example": "2017-02-20T13:57:16.229+0000"
        },
        "endpointConfig": {
          "type": "object",
          "example": {
            "endpoint_type": "http",
            "sandbox_endpoints": {
              "url": "https://localhost:9443/am/sample/pizzashack/v1/api/"
            },
            "production_endpoints": {
              "url": "https://localhost:9443/am/sample/pizzashack/v1/api/"
            }
          },
          "description": "Endpoint configuration of the API. This can be used to provide different types of endpoints including Simple REST Endpoints, Loadbalanced and Failover.\n\n`Simple REST Endpoint`\n  {\n    \"endpoint_type\": \"http\",\n    \"sandbox_endpoints\":       {\n       \"url\": \"https://localhost:9443/am/sample/pizzashack/v1/api/\"\n    },\n    \"production_endpoints\":       {\n       \"url\": \"https://localhost:9443/am/sample/pizzashack/v1/api/\"\n    }\n  }\n\n`Loadbalanced Endpoint`\n\n  {\n    \"endpoint_type\": \"load_balance\",\n    \"algoCombo\": \"org.apache.synapse.endpoints.algorithms.RoundRobin\",\n    \"sessionManagement\": \"\",\n    \"sandbox_endpoints\":       [\n                {\n          \"url\": \"https://localhost:9443/am/sample/pizzashack/v1/api/1\"\n       },\n                {\n          \"endpoint_type\": \"http\",\n          \"template_not_supported\": false,\n          \"url\": \"https://localhost:9443/am/sample/pizzashack/v1/api/2\"\n       }\n    ],\n    \"production_endpoints\":       [\n                {\n          \"url\": \"https://localhost:9443/am/sample/pizzashack/v1/api/3\"\n       },\n                {\n          \"endpoint_type\": \"http\",\n          \"template_not_supported\": false,\n          \"url\": \"https://localhost:9443/am/sample/pizzashack/v1/api/4\"\n       }\n    ],\n    \"sessionTimeOut\": \"\",\n    \"algoClassName\": \"org.apache.synapse.endpoints.algorithms.RoundRobin\"\n  }\n\n`Failover Endpoint`\n\n  {\n    \"production_failovers\":[\n       {\n          \"endpoint_type\":\"http\",\n          \"template_not_supported\":false,\n          \"url\":\"https://localhost:9443/am/sample/pizzashack/v1/api/1\"\n       }\n    ],\n    \"endpoint_type\":\"failover\",\n    \"sandbox_endpoints\":{\n       \"url\":\"https://localhost:9443/am/sample/pizzashack/v1/api/2\"\n    },\n    \"production_endpoints\":{\n       \"url\":\"https://localhost:9443/am/sample/pizzashack/v1/api/3\"\n    },\n    \"sandbox_failovers\":[\n       {\n          \"endpoint_type\":\"http\",\n          \"template_not_supported\":false,\n          \"url\":\"https://localhost:9443/am/sample/pizzashack/v1/api/4\"\n       }\n    ]\n  }\n\n`Default Endpoint`\n\n  {\n    \"endpoint_type\":\"default\",\n    \"sandbox_endpoints\":{\n       \"url\":\"default\"\n    },\n    \"production_endpoints\":{\n       \"url\":\"default\"\n    }\n  }\n",
          "properties": {}
        },
        "endpointImplementationType": {
          "type": "string",
          "example": "INLINE",
          "default": "ENDPOINT",
          "enum": [
            "INLINE",
            "ENDPOINT"
          ]
        },
        "scopes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Scope",
            "originalRef": "#/definitions/Scope"
          }
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIOperations",
            "originalRef": "#/definitions/APIOperations"
          }
        },
        "threatProtectionPolicies": {
          "type": "object",
          "properties": {
            "list": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "policyId": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "title": "API object",
      "x-scopes": [
        "apim:api_create"
      ]
    },
    "AuditReport": {
      "properties": {
        "report": {
          "type": "string",
          "description": "The API Security Audit Report\n"
        },
        "grade": {
          "type": "string",
          "example": "27.95",
          "description": "The overall grade of the Security Audit\n"
        },
        "numErrors": {
          "type": "integer",
          "example": 20,
          "description": "The number of errors in the API Definition\n"
        }
      },
      "title": "Resource for Audit Report"
    },
    "APIProductList": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1,
          "description": "Number of API Products returned.\n"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIProductInfo",
            "originalRef": "#/definitions/APIProductInfo"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination",
          "originalRef": "#/definitions/Pagination"
        }
      },
      "title": "API Product List"
    },
    "APIProductInfo": {
      "properties": {
        "id": {
          "type": "string",
          "example": "01234567-0123-0123-0123-012345678901",
          "description": "UUID of the api product\n"
        },
        "name": {
          "type": "string",
          "example": "CalculatorAPIProduct",
          "description": "Name of the API Product"
        },
        "context": {
          "type": "string",
          "example": "CalculatorAPI"
        },
        "description": {
          "type": "string",
          "example": "A calculator API Product that supports basic operations",
          "description": "A brief description about the API"
        },
        "provider": {
          "type": "string",
          "example": "admin",
          "description": "If the provider value is not given, the user invoking the API will be used as the provider.\n"
        },
        "hasThumbnail": {
          "type": "boolean",
          "example": true
        },
        "state": {
          "type": "string",
          "description": "State of the API product. Only published api products are visible on the store\n",
          "enum": [
            "CREATED",
            "PUBLISHED"
          ]
        },
        "securityScheme": {
          "type": "array",
          "description": "Types of API security, the current API secured with. It can be either OAuth2 or mutual SSL or both. If\nit is not set OAuth2 will be set as the security for the current API.\n",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "API Info object with basic API details."
    },
    "APIProduct": {
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "01234567-0123-0123-0123-012345678901",
          "description": "UUID of the api product\n"
        },
        "name": {
          "type": "string",
          "example": "CalculatorAPIProduct",
          "description": "Name of the API Product"
        },
        "context": {
          "type": "string",
          "example": "CalculatorAPI"
        },
        "description": {
          "type": "string",
          "example": "A calculator API Product that supports basic operations",
          "description": "A brief description about the API"
        },
        "provider": {
          "type": "string",
          "example": "admin",
          "description": "If the provider value is not given, the user invoking the API will be used as the provider.\n"
        },
        "hasThumbnail": {
          "type": "boolean",
          "example": true
        },
        "state": {
          "type": "string",
          "description": "State of the API product. Only published api products are visible on the store\n",
          "enum": [
            "CREATED",
            "PUBLISHED"
          ]
        },
        "enableSchemaValidation": {
          "type": "boolean",
          "example": false
        },
        "responseCachingEnabled": {
          "type": "boolean",
          "example": true
        },
        "cacheTimeout": {
          "type": "integer",
          "example": 300
        },
        "visibility": {
          "type": "string",
          "example": "PUBLIC",
          "description": "The visibility level of the API. Accepts one of the following. PUBLIC, PRIVATE, RESTRICTED.",
          "default": "PUBLIC",
          "enum": [
            "PUBLIC",
            "PRIVATE",
            "RESTRICTED"
          ]
        },
        "visibleRoles": {
          "type": "array",
          "example": [],
          "description": "The user roles that are able to access the API",
          "items": {
            "type": "string"
          }
        },
        "visibleTenants": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "accessControl": {
          "type": "string",
          "description": "Defines whether the API Product is restricted to certain set of publishers or creators or is it visible to all the\npublishers and creators. If the accessControl restriction is none, this API Product can be modified by all the\npublishers and creators, if not it can only be viewable/modifiable by certain set of publishers and creators,\nbased on the restriction.\n",
          "default": "NONE",
          "enum": [
            "NONE",
            "RESTRICTED"
          ]
        },
        "accessControlRoles": {
          "type": "array",
          "example": [
            "admin"
          ],
          "description": "The user roles that are able to view/modify as API Product publisher or creator.",
          "items": {
            "type": "string"
          }
        },
        "gatewayEnvironments": {
          "type": "array",
          "example": [
            "Production and Sandbox"
          ],
          "description": "List of gateway environments the API Product is available\n",
          "items": {
            "type": "string"
          }
        },
        "apiType": {
          "type": "string",
          "example": "APIProduct",
          "description": "The api type to be used. Accepted values are API, API PRODUCT"
        },
        "transport": {
          "type": "array",
          "example": [
            "http",
            "https"
          ],
          "description": "Supported transports for the API (http and/or https).\n",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "example": [
            "substract",
            "add"
          ],
          "items": {
            "type": "string"
          }
        },
        "policies": {
          "type": "array",
          "example": [
            "Unlimited"
          ],
          "items": {
            "type": "string"
          }
        },
        "apiThrottlingPolicy": {
          "type": "string",
          "example": "Unlimited",
          "description": "The API level throttling policy selected for the particular API Product"
        },
        "authorizationHeader": {
          "type": "string",
          "description": "Name of the Authorization header used for invoking the API. If it is not set, Authorization header name specified\nin tenant or system level will be used.\n"
        },
        "securityScheme": {
          "type": "array",
          "description": "Types of API security, the current API secured with. It can be either OAuth2 or mutual SSL or both. If\nit is not set OAuth2 will be set as the security for the current API.\n",
          "items": {
            "type": "string"
          }
        },
        "subscriptionAvailability": {
          "type": "string",
          "example": "current_tenant",
          "description": "The subscription availability. Accepts one of the following. current_tenant, all_tenants or specific_tenants.",
          "default": "all_tenants",
          "enum": [
            "current_tenant",
            "all_tenants",
            "specific_tenants"
          ]
        },
        "subscriptionAvailableTenants": {
          "type": "array",
          "example": [
            "tenant1",
            "tenant2"
          ],
          "items": {
            "type": "string"
          },
          "x-otherScopes": [
            "apim:api_publish"
          ]
        },
        "additionalProperties": {
          "type": "object",
          "description": "Map of custom properties of API",
          "additionalProperties": {
            "type": "string"
          }
        },
        "monetization": {
          "$ref": "#/definitions/APIMonetizationInfo",
          "originalRef": "#/definitions/APIMonetizationInfo"
        },
        "businessInformation": {
          "$ref": "#/definitions/APIProductBusinessInformation",
          "originalRef": "#/definitions/APIProductBusinessInformation"
        },
        "corsConfiguration": {
          "$ref": "#/definitions/APICorsConfiguration",
          "originalRef": "#/definitions/APICorsConfiguration"
        },
        "createdTime": {
          "type": "string",
          "example": "2017-02-20T13:57:16.229+0000"
        },
        "lastUpdatedTime": {
          "type": "string",
          "example": "2017-02-20T13:57:16.229+0000"
        },
        "apis": {
          "type": "array",
          "description": "APIs and resources in the API Product.\n",
          "items": {
            "$ref": "#/definitions/ProductAPI",
            "originalRef": "#/definitions/ProductAPI"
          }
        },
        "scopes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Scope",
            "originalRef": "#/definitions/Scope"
          }
        }
      },
      "title": "API Product object"
    },
    "ProductAPI": {
      "required": [
        "apiId"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "CalculatorAPI"
        },
        "apiId": {
          "type": "string",
          "example": "01234567-0123-0123-0123-012345678901"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIOperations",
            "originalRef": "#/definitions/APIOperations"
          }
        }
      },
      "title": "ProductAPI"
    },
    "ResourcePath": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "resourcePath": {
          "type": "string",
          "example": "/menu"
        },
        "httpVerb": {
          "type": "string",
          "example": "GET"
        }
      },
      "title": "ResourcePath"
    },
    "ResourcePathList": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1,
          "description": "Number of API Resource Paths returned.\n"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourcePath",
            "originalRef": "#/definitions/ResourcePath"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination",
          "originalRef": "#/definitions/Pagination"
        }
      },
      "title": "ResourcePath List"
    },
    "APIProductOutdatedStatus": {
      "properties": {
        "isOutdated": {
          "type": "boolean",
          "example": true,
          "description": "Indicates if an API Product is outdated\n"
        }
      },
      "title": "APIProduct is outdated status"
    },
    "APIProductBusinessInformation": {
      "properties": {
        "businessOwner": {
          "type": "string",
          "example": "businessowner"
        },
        "businessOwnerEmail": {
          "type": "string",
          "example": "businessowner@wso2.com"
        },
        "technicalOwner": {
          "type": "string",
          "example": "technicalowner"
        },
        "technicalOwnerEmail": {
          "type": "string",
          "example": "technicalowner@wso2.com"
        }
      }
    },
    "Application": {
      "required": [
        "name",
        "throttlingTier"
      ],
      "properties": {
        "applicationId": {
          "type": "string",
          "example": "01234567-0123-0123-0123-012345678901"
        },
        "name": {
          "type": "string",
          "example": "CalculatorApp"
        },
        "subscriber": {
          "type": "string",
          "example": "admin"
        },
        "throttlingTier": {
          "type": "string",
          "example": "Unlimited"
        },
        "description": {
          "type": "string",
          "example": "Sample calculator application"
        },
        "groupId": {
          "type": "string",
          "example": ""
        }
      },
      "title": "Application"
    },
    "ApplicationInfo": {
      "properties": {
        "applicationId": {
          "type": "string",
          "example": "01234567-0123-0123-0123-012345678901"
        },
        "name": {
          "type": "string",
          "example": "CalculatorApp"
        },
        "subscriber": {
          "type": "string",
          "example": "admin"
        },
        "description": {
          "type": "string",
          "example": "Sample calculator application"
        },
        "subscriptionCount": {
          "type": "integer"
        }
      },
      "title": "Application info object with basic application details"
    },
    "DocumentList": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1,
          "description": "Number of Documents returned.\n"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Document",
            "originalRef": "#/definitions/Document"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination",
          "originalRef": "#/definitions/Pagination"
        }
      },
      "title": "Document List"
    },
    "Document": {
      "required": [
        "name",
        "sourceType",
        "type",
        "visibility"
      ],
      "properties": {
        "documentId": {
          "type": "string",
          "example": "01234567-0123-0123-0123-012345678901"
        },
        "name": {
          "type": "string",
          "example": "CalculatorDoc"
        },
        "type": {
          "type": "string",
          "example": "HOWTO",
          "enum": [
            "HOWTO",
            "SAMPLES",
            "PUBLIC_FORUM",
            "SUPPORT_FORUM",
            "API_MESSAGE_FORMAT",
            "SWAGGER_DOC",
            "OTHER"
          ]
        },
        "summary": {
          "type": "string",
          "example": "Summary of Calculator Documentation"
        },
        "sourceType": {
          "type": "string",
          "example": "INLINE",
          "enum": [
            "INLINE",
            "MARKDOWN",
            "URL",
            "FILE"
          ]
        },
        "sourceUrl": {
          "type": "string",
          "example": ""
        },
        "fileName": {
          "type": "string",
          "example": ""
        },
        "inlineContent": {
          "type": "string",
          "example": "This is doc content. This can have many lines."
        },
        "otherTypeName": {
          "type": "string",
          "example": ""
        },
        "visibility": {
          "type": "string",
          "example": "API_LEVEL",
          "enum": [
            "OWNER_ONLY",
            "PRIVATE",
            "API_LEVEL"
          ]
        },
        "createdTime": {
          "type": "string",
          "example": "2017-02-20T13:57:16.229+0000"
        },
        "createdBy": {
          "type": "string"
        },
        "lastUpdatedTime": {
          "type": "string",
          "example": "2017-02-20T13:57:16.229+0000"
        },
        "lastUpdatedBy": {
          "type": "string"
        }
      },
      "title": "Document"
    },
    "GraphQLSchema": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "admin--HackerNewsAPI.graphql"
        },
        "schemaDefinition": {
          "type": "string"
        }
      },
      "title": "GraphQL Schema"
    },
    "MediationList": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1,
          "description": "Number of mediation sequences returned.\n"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediationInfo",
            "originalRef": "#/definitions/MediationInfo"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination",
          "originalRef": "#/definitions/Pagination"
        }
      },
      "title": "Mediation List"
    },
    "MediationInfo": {
      "required": [
        "id",
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "json_fault.xml"
        },
        "id": {
          "type": "string",
          "example": "01234567-0123-0123-0123-012345678901"
        },
        "type": {
          "type": "string",
          "example": "in",
          "enum": [
            "in",
            "out",
            "fault"
          ]
        }
      },
      "title": "MediationInfo"
    },
    "Mediation": {
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "01234567-0123-0123-0123-012345678901"
        },
        "name": {
          "type": "string",
          "example": "json_fault.xml"
        },
        "type": {
          "type": "string",
          "example": "in",
          "enum": [
            "in",
            "out",
            "fault"
          ]
        }
      },
      "title": "Mediation"
    },
    "ThrottlingPolicyList": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1,
          "description": "Number of Tiers returned.\n"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThrottlingPolicy",
            "originalRef": "#/definitions/ThrottlingPolicy"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination",
          "originalRef": "#/definitions/Pagination"
        }
      },
      "title": "Throttling policy list"
    },
    "ThrottlingPolicy": {
      "required": [
        "name",
        "requestCount",
        "stopOnQuotaReach",
        "tierPlan",
        "unitTime"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Platinum"
        },
        "description": {
          "type": "string",
          "example": "Allows 50 request(s) per minute."
        },
        "policyLevel": {
          "type": "string",
          "example": "api",
          "enum": [
            "subscription",
            "api"
          ]
        },
        "displayName": {
          "type": "string",
          "example": "Platinum"
        },
        "attributes": {
          "type": "object",
          "example": {},
          "description": "Custom attributes added to the policy policy\n",
          "additionalProperties": {
            "type": "string"
          }
        },
        "requestCount": {
          "type": "integer",
          "format": "int64",
          "example": 50,
          "description": "Maximum number of requests which can be sent within a provided unit time\n"
        },
        "unitTime": {
          "type": "integer",
          "format": "int64",
          "example": 60000
        },
        "timeUnit": {
          "type": "string",
          "example": "min"
        },
        "tierPlan": {
          "type": "string",
          "example": "FREE",
          "description": "This attribute declares whether this policy is available under commercial or free\n",
          "enum": [
            "FREE",
            "COMMERCIAL"
          ]
        },
        "stopOnQuotaReach": {
          "type": "boolean",
          "example": true,
          "description": "By making this attribute to false, you are capabale of sending requests\neven if the request count exceeded within a unit time\n"
        },
        "monetizationProperties": {
          "type": "object",
          "example": {},
          "description": "Properties of a tier plan which are related to monetization",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "Tier"
    },
    "SubscriptionList": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1,
          "description": "Number of Subscriptions returned.\n"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subscription",
            "originalRef": "#/definitions/Subscription"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination",
          "originalRef": "#/definitions/Pagination"
        }
      },
      "title": "Subscription List"
    },
    "Subscription": {
      "required": [
        "applicationInfo",
        "subscriptionId",
        "subscriptionStatus",
        "throttlingPolicy"
      ],
      "properties": {
        "subscriptionId": {
          "type": "string",
          "example": "01234567-0123-0123-0123-012345678901"
        },
        "applicationInfo": {
          "$ref": "#/definitions/ApplicationInfo",
          "originalRef": "#/definitions/ApplicationInfo"
        },
        "throttlingPolicy": {
          "type": "string",
          "example": "Unlimited"
        },
        "subscriptionStatus": {
          "type": "string",
          "example": "BLOCKED",
          "enum": [
            "BLOCKED",
            "PROD_ONLY_BLOCKED",
            "UNBLOCKED",
            "ON_HOLD",
            "REJECTED"
          ]
        }
      },
      "title": "Subscription"
    },
    "APIMonetizationUsage": {
      "properties": {
        "properties": {
          "type": "object",
          "description": "Map of custom properties related to monetization usage",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "API monetization usage object"
    },
    "APIRevenue": {
      "properties": {
        "properties": {
          "type": "object",
          "description": "Map of custom properties related to API revenue",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "API revenue data object"
    },
    "MediationPolicy": {
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "69ea3fa6-55c6-472e-896d-e449dd34a824"
        },
        "name": {
          "type": "string",
          "example": "log_in_message"
        },
        "type": {
          "type": "string",
          "example": "in"
        },
        "shared": {
          "type": "boolean",
          "example": true
        }
      },
      "title": "Mediation Policy"
    },
    "Error": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string",
          "description": "Error message."
        },
        "description": {
          "type": "string",
          "description": "A detail description about the error message.\n"
        },
        "moreInfo": {
          "type": "string",
          "description": "Preferably an url with more details about the error.\n"
        },
        "error": {
          "type": "array",
          "description": "If there are more than one error list them out.\nFor example, list out validation errors by each field.\n",
          "items": {
            "$ref": "#/definitions/ErrorListItem",
            "originalRef": "#/definitions/ErrorListItem"
          }
        }
      },
      "title": "Error object returned with 4XX HTTP Status"
    },
    "ErrorListItem": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "description": "Description about individual errors occurred\n"
        },
        "description": {
          "type": "string",
          "description": "A detail description about the error message.\n"
        }
      },
      "title": "Description of individual errors that may have occurred during a request."
    },
    "Environment": {
      "required": [
        "endpoints",
        "name",
        "serverUrl",
        "showInApiConsole",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Production and Sandbox"
        },
        "type": {
          "type": "string",
          "example": "hybrid"
        },
        "serverUrl": {
          "type": "string",
          "example": "https://localhost:9443/services/"
        },
        "showInApiConsole": {
          "type": "boolean",
          "example": true
        },
        "endpoints": {
          "$ref": "#/definitions/EnvironmentEndpoints",
          "originalRef": "#/definitions/EnvironmentEndpoints"
        }
      },
      "title": "Environment"
    },
    "EnvironmentList": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1,
          "description": "Number of Environments returned.\n"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Environment",
            "originalRef": "#/definitions/Environment"
          }
        }
      },
      "title": "Environment List"
    },
    "EnvironmentEndpoints": {
      "properties": {
        "http": {
          "type": "string",
          "example": "http://localhost:8280",
          "description": "HTTP environment URL"
        },
        "https": {
          "type": "string",
          "example": "https://localhost:8243",
          "description": "HTTPS environment URL"
        },
        "ws": {
          "type": "string",
          "example": "http://localhost:9099",
          "description": "WS environment URL"
        },
        "wss": {
          "type": "string",
          "example": "https://localhost:8099",
          "description": "WSS environment URL"
        }
      },
      "title": "Environment Endpoints"
    },
    "FileInfo": {
      "properties": {
        "relativePath": {
          "type": "string",
          "example": "apis/01234567-0123-0123-0123-012345678901/thumbnail",
          "description": "relative location of the file (excluding the base context and host of the Publisher API)"
        },
        "mediaType": {
          "type": "string",
          "example": "image/jpeg",
          "description": "media-type of the file"
        }
      },
      "title": "File Information including meta data"
    },
    "APIMaxTps": {
      "properties": {
        "production": {
          "type": "integer",
          "format": "int64",
          "example": 1000
        },
        "sandbox": {
          "type": "integer",
          "format": "int64",
          "example": 1000
        }
      }
    },
    "APIEndpointSecurity": {
      "properties": {
        "type": {
          "type": "string",
          "example": "basic",
          "description": "Accepts one of the following, basic or digest.",
          "enum": [
            "BASIC",
            "DIGEST"
          ]
        },
        "username": {
          "type": "string",
          "example": "admin"
        },
        "password": {
          "type": "string",
          "example": "password"
        }
      }
    },
    "APIBusinessInformation": {
      "properties": {
        "businessOwner": {
          "type": "string",
          "example": "businessowner"
        },
        "businessOwnerEmail": {
          "type": "string",
          "example": "businessowner@wso2.com"
        },
        "technicalOwner": {
          "type": "string",
          "example": "technicalowner"
        },
        "technicalOwnerEmail": {
          "type": "string",
          "example": "technicalowner@wso2.com"
        }
      }
    },
    "APICorsConfiguration": {
      "properties": {
        "corsConfigurationEnabled": {
          "type": "boolean",
          "default": false
        },
        "accessControlAllowOrigins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "accessControlAllowCredentials": {
          "type": "boolean",
          "default": false
        },
        "accessControlAllowHeaders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "accessControlAllowMethods": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "CORS configuration for the API\n"
    },
    "Endpoint": {
      "properties": {
        "id": {
          "type": "string",
          "example": "01234567-0123-0123-0123-012345678901",
          "description": "UUID of the Endpoint entry\n"
        },
        "name": {
          "type": "string",
          "example": "Endpoint 1",
          "description": "name of the Endpoint entry\n"
        },
        "endpointConfig": {
          "type": "object",
          "properties": {
            "endpointType": {
              "type": "string",
              "example": "FAIL_OVER",
              "enum": [
                "SINGLE",
                "LOAD_BALANCED",
                "FAIL_OVER"
              ]
            },
            "list": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EndpointConfig",
                "originalRef": "#/definitions/EndpointConfig"
              }
            }
          }
        },
        "endpointSecurity": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "example": false
            },
            "type": {
              "type": "string",
              "example": "basic"
            },
            "username": {
              "type": "string",
              "example": "basic"
            },
            "password": {
              "type": "string",
              "example": "basic"
            }
          }
        },
        "maxTps": {
          "type": "integer",
          "format": "int64",
          "example": 1000,
          "description": "Endpoint max tps"
        },
        "type": {
          "type": "string",
          "example": "http"
        }
      },
      "title": "Endpoints"
    },
    "EndpointConfig": {
      "properties": {
        "url": {
          "type": "string",
          "example": "http://localhost:8280",
          "description": "Service url of the endpoint\n"
        },
        "timeout": {
          "type": "string",
          "example": "1000",
          "description": "Time out of the endpoint\n"
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Suspension time"
              },
              "value": {
                "type": "string",
                "example": "2s"
              }
            }
          }
        }
      },
      "title": "Endpoint Configuration"
    },
    "EndpointList": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1,
          "description": "Number of Endpoints returned.\n"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Endpoint",
            "originalRef": "#/definitions/Endpoint"
          }
        }
      },
      "title": "Endpoint List"
    },
    "Scope": {
      "properties": {
        "name": {
          "type": "string",
          "example": "apim:api_view",
          "description": "name of Scope\n"
        },
        "description": {
          "type": "string",
          "example": "This Scope can used to view Apis",
          "description": "description of Scope\n"
        },
        "bindings": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of binding role / permission\n"
            },
            "values": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "title": "Scope"
    },
    "APIOperations": {
      "properties": {
        "id": {
          "type": "string",
          "example": "postapiresource"
        },
        "target": {
          "type": "string"
        },
        "verb": {
          "type": "string"
        },
        "authType": {
          "type": "string",
          "default": "Any"
        },
        "throttlingPolicy": {
          "type": "string",
          "example": "Unlimited"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "usedProductIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "amznResourceName": {
          "type": "string"
        },
        "amznResourceTimeout": {
          "type": "integer"
        }
      },
      "title": "Operation"
    },
    "ScopeList": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1,
          "description": "Number of Scopes returned.\n"
        },
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "apim:api_view"
              },
              "description": {
                "type": "string",
                "example": "Scope for Api view"
              }
            }
          }
        }
      },
      "title": "Scope List"
    },
    "ExternalStore": {
      "properties": {
        "id": {
          "type": "string",
          "example": "Store123#",
          "description": "The external store identifier, which is a unique value.\n"
        },
        "displayName": {
          "type": "string",
          "example": "UKStore",
          "description": "The name of the external API Store that is displayed in the Publisher UI.\n"
        },
        "type": {
          "type": "string",
          "example": "wso2",
          "description": "The type of the Store. This can be a WSO2-specific API Store or an external one.\n"
        },
        "endpoint": {
          "type": "string",
          "example": "http://localhost:9764/store",
          "description": "The endpoint URL of the external store\n"
        }
      },
      "title": "External Store"
    },
    "APIExternalStore": {
      "properties": {
        "id": {
          "type": "string",
          "example": "Store123#",
          "description": "The external store identifier, which is a unique value.\n"
        },
        "lastUpdatedTime": {
          "type": "string",
          "example": "2019-09-09T13:57:16.229+0000",
          "description": "The recent timestamp which a given API is updated in the external store.\n"
        }
      },
      "title": "API External Store"
    },
    "APIExternalStoreList": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1,
          "description": "Number of external stores returned.\n"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIExternalStore",
            "originalRef": "#/definitions/APIExternalStore"
          }
        }
      },
      "title": "API External Store List"
    },
    "ExternalStoreList": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1,
          "description": "Number of external stores returned.\n"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalStore",
            "originalRef": "#/definitions/ExternalStore"
          }
        }
      },
      "title": "External Store List"
    },
    "Certificates": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1
        },
        "certificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertMetadata",
            "originalRef": "#/definitions/CertMetadata"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination",
          "originalRef": "#/definitions/Pagination"
        }
      },
      "title": "Certificates",
      "description": "Representation of a list of certificates"
    },
    "CertMetadata": {
      "properties": {
        "alias": {
          "type": "string",
          "example": "wso2carbon"
        },
        "endpoint": {
          "type": "string",
          "example": "www.abc.com"
        }
      },
      "title": "Certificate",
      "description": "Representation of the details of a certificate"
    },
    "CertificateInfo": {
      "properties": {
        "status": {
          "type": "string",
          "example": "Active"
        },
        "validity": {
          "$ref": "#/definitions/CertificateValidity",
          "originalRef": "#/definitions/CertificateValidity"
        },
        "version": {
          "type": "string",
          "example": "V3"
        },
        "subject": {
          "type": "string",
          "example": "CN=wso2.com, OU=wso2, O=wso2, L=Colombo, ST=Western, C=LK"
        }
      },
      "title": "Certificate information"
    },
    "CertificateValidity": {
      "properties": {
        "from": {
          "type": "string",
          "example": "12-12-2017"
        },
        "to": {
          "type": "string",
          "example": "01-01-2019"
        }
      },
      "title": "Certificate Valid period"
    },
    "ClientCertificates": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1
        },
        "certificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientCertMetadata",
            "originalRef": "#/definitions/ClientCertMetadata"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination",
          "originalRef": "#/definitions/Pagination"
        }
      },
      "title": "Client Certificates",
      "description": "Representation of a list of client certificates"
    },
    "ClientCertMetadata": {
      "properties": {
        "alias": {
          "type": "string",
          "example": "wso2carbon"
        },
        "apiId": {
          "type": "string",
          "example": "64eca60b-2e55-4c38-8603-e9e6bad7d809"
        },
        "tier": {
          "type": "string",
          "example": "Gold"
        }
      },
      "title": "Client certificate meta data",
      "description": "Meta data of certificate"
    },
    "Label": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "access_urls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Label"
    },
    "LabelList": {
      "properties": {
        "count": {
          "type": "integer",
          "description": "Number of Labels returned.\n"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label",
            "originalRef": "#/definitions/Label"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination",
          "originalRef": "#/definitions/Pagination"
        }
      },
      "title": "Label List"
    },
    "LifecycleState": {
      "properties": {
        "state": {
          "type": "string",
          "example": "Created"
        },
        "checkItems": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Deprecate old versions after publish the API"
              },
              "value": {
                "type": "boolean",
                "example": false
              },
              "requiredStates": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "availableTransitions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "example": "Promote"
              },
              "targetState": {
                "type": "string",
                "example": "Created"
              }
            }
          }
        }
      },
      "title": "Lifecycle State"
    },
    "LifecycleHistory": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LifecycleHistoryItem",
            "originalRef": "#/definitions/LifecycleHistoryItem"
          }
        }
      },
      "title": "Lifecycle history item list"
    },
    "LifecycleHistoryItem": {
      "properties": {
        "previousState": {
          "type": "string",
          "example": "Created"
        },
        "postState": {
          "type": "string",
          "example": "Published"
        },
        "user": {
          "type": "string",
          "example": "admin"
        },
        "updatedTime": {
          "type": "string",
          "format": "dateTime",
          "example": "2019-02-31T23:59:60Z"
        }
      },
      "title": "Lifecycle history item"
    },
    "WorkflowResponse": {
      "required": [
        "workflowStatus"
      ],
      "properties": {
        "workflowStatus": {
          "type": "string",
          "example": "APPROVED",
          "description": "This attribute declares whether this workflow task is approved or rejected.\n",
          "enum": [
            "CREATED",
            "APPROVED",
            "REJECTED",
            "REGISTERED"
          ]
        },
        "jsonPayload": {
          "type": "string",
          "description": "Attributes that returned after the workflow execution\n"
        },
        "lifecycleState": {
          "$ref": "#/definitions/LifecycleState",
          "originalRef": "#/definitions/LifecycleState"
        }
      },
      "title": "workflow Response"
    },
    "OpenAPIDefinitionValidationResponse": {
      "required": [
        "isValid"
      ],
      "properties": {
        "isValid": {
          "type": "boolean",
          "example": true,
          "description": "This attribute declares whether this definition is valid or not.\n"
        },
        "content": {
          "type": "string",
          "description": "OpenAPI definition content.\n"
        },
        "info": {
          "type": "object",
          "description": "API definition information\n",
          "properties": {
            "name": {
              "type": "string",
              "example": "PetStore"
            },
            "version": {
              "type": "string",
              "example": "1.0.0"
            },
            "context": {
              "type": "string",
              "example": "/petstore"
            },
            "description": {
              "type": "string",
              "example": "A sample API that uses a petstore as an example to demonstrate swagger-2.0 specification"
            },
            "openAPIVersion": {
              "type": "string",
              "example": "3.0.0"
            }
          }
        },
        "errors": {
          "type": "array",
          "description": "If there are more than one error list them out.\nFor example, list out validation errors by each field.\n",
          "items": {
            "$ref": "#/definitions/ErrorListItem",
            "originalRef": "#/definitions/ErrorListItem"
          }
        }
      },
      "title": "OpenAPI Definition Validation Response"
    },
    "WSDLValidationResponse": {
      "required": [
        "isValid"
      ],
      "properties": {
        "isValid": {
          "type": "boolean",
          "example": true,
          "description": "This attribute declares whether this definition is valid or not.\n"
        },
        "errors": {
          "type": "array",
          "description": "If there are more than one error list them out.\nFor example, list out validation errors by each field.\n",
          "items": {
            "$ref": "#/definitions/ErrorListItem",
            "originalRef": "#/definitions/ErrorListItem"
          }
        },
        "wsdlInfo": {
          "type": "object",
          "description": "Summary of the WSDL including the basic information",
          "properties": {
            "version": {
              "type": "string",
              "example": "1.1",
              "description": "WSDL version\n"
            },
            "endpoints": {
              "type": "array",
              "description": "A list of endpoints the service exposes\n",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "StockQuoteSoap",
                    "description": "Name of the endpoint"
                  },
                  "location": {
                    "type": "string",
                    "example": "http://www.webservicex.net/stockquote.asmx",
                    "description": "Endpoint URL"
                  }
                }
              }
            }
          }
        }
      },
      "title": "WSDL Definition Validation Response"
    },
    "GraphQLValidationResponse": {
      "required": [
        "errorMessage",
        "isValid"
      ],
      "properties": {
        "isValid": {
          "type": "boolean",
          "example": true,
          "description": "This attribute declares whether this definition is valid or not.\n"
        },
        "errorMessage": {
          "type": "string",
          "description": "This attribute declares the validation error message\n"
        },
        "graphQLInfo": {
          "type": "object",
          "description": "Summary of the GraphQL including the basic information",
          "properties": {
            "operations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIOperations",
                "originalRef": "#/definitions/APIOperations"
              }
            },
            "graphQLSchema": {
              "$ref": "#/definitions/GraphQLSchema",
              "originalRef": "#/definitions/GraphQLSchema"
            }
          }
        }
      },
      "title": "GraphQL API definition validation Response"
    },
    "ApiEndpointValidationResponse": {
      "required": [
        "statusCode",
        "statusMessage"
      ],
      "properties": {
        "statusCode": {
          "type": "integer",
          "description": "HTTP status code"
        },
        "statusMessage": {
          "type": "string",
          "description": "string"
        },
        "error": {
          "type": "string",
          "description": "If an error occurs, the error message will be set to this property.\nIf not, this will remain null.\n"
        }
      },
      "title": "API Endpoint url validation response"
    },
    "ThreatProtectionPolicyList": {
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThreatProtectionPolicy",
            "originalRef": "#/definitions/ThreatProtectionPolicy"
          }
        }
      },
      "title": "Threat Protection Policy List"
    },
    "ThreatProtectionPolicy": {
      "required": [
        "name",
        "policy",
        "type"
      ],
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Policy ID"
        },
        "name": {
          "type": "string",
          "description": "Name of the policy"
        },
        "type": {
          "type": "string",
          "description": "Type of the policy"
        },
        "policy": {
          "type": "string",
          "description": "policy as a json string"
        }
      },
      "title": "Threat Protection Policy Schema"
    },
    "SearchResultList": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1,
          "description": "Number of results returned.\n"
        },
        "list": {
          "type": "array",
          "items": {}
        },
        "pagination": {
          "$ref": "#/definitions/Pagination",
          "originalRef": "#/definitions/Pagination"
        }
      },
      "title": "Unified Search Result List"
    },
    "SearchResult": {
      "required": [
        "name"
      ],
      "discriminator": "name",
      "properties": {
        "id": {
          "type": "string",
          "example": "01234567-0123-0123-0123-012345678901"
        },
        "name": {
          "type": "string",
          "example": "TestAPI"
        },
        "type": {
          "type": "string",
          "example": "API",
          "enum": [
            "DOC",
            "API",
            "APIProduct"
          ]
        },
        "transportType": {
          "type": "string",
          "description": "Accepted values are HTTP, WS, SOAPTOREST, GRAPHQL"
        }
      },
      "title": "Search Result"
    },
    "APISearchResult": {
      "title": "API Result",
      "allOf": [
        {
          "$ref": "#/definitions/SearchResult",
          "originalRef": "#/definitions/SearchResult"
        },
        {
          "properties": {
            "description": {
              "type": "string",
              "example": "A calculator API that supports basic operations",
              "description": "A brief description about the API"
            },
            "context": {
              "type": "string",
              "example": "CalculatorAPI",
              "description": "A string that represents the context of the user's request"
            },
            "version": {
              "type": "string",
              "example": "1.0.0",
              "description": "The version of the API"
            },
            "provider": {
              "type": "string",
              "example": "admin",
              "description": "If the provider value is not given, the user invoking the API will be used as the provider.\n"
            },
            "status": {
              "type": "string",
              "example": "CREATED",
              "description": "This describes in which status of the lifecycle the API is"
            },
            "thumbnailUri": {
              "type": "string",
              "example": "/apis/01234567-0123-0123-0123-012345678901/thumbnail"
            }
          }
        }
      ]
    },
    "APIProductSearchResult": {
      "title": "API Result",
      "allOf": [
        {
          "$ref": "#/definitions/SearchResult",
          "originalRef": "#/definitions/SearchResult"
        },
        {
          "properties": {
            "description": {
              "type": "string",
              "example": "A calculator API that supports basic operations",
              "description": "A brief description about the API"
            },
            "context": {
              "type": "string",
              "example": "CalculatorAPI",
              "description": "A string that represents the context of the user's request"
            },
            "provider": {
              "type": "string",
              "example": "admin",
              "description": "If the provider value is not given, the user invoking the API will be used as the provider.\n"
            },
            "status": {
              "type": "string",
              "example": "PUBLISHED",
              "description": "This describes in which status of the lifecycle the APIPRODUCT is"
            },
            "thumbnailUri": {
              "type": "string",
              "example": "/apis/01234567-0123-0123-0123-012345678901/thumbnail"
            }
          }
        }
      ]
    },
    "APIMonetizationInfo": {
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "boolean",
          "example": true,
          "description": "Flag to indicate the monetization status"
        },
        "properties": {
          "type": "object",
          "description": "Map of custom properties related to monetization",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "API monetization object"
    },
    "DocumentSearchResult": {
      "title": "Document Result",
      "allOf": [
        {
          "$ref": "#/definitions/SearchResult",
          "originalRef": "#/definitions/SearchResult"
        },
        {
          "properties": {
            "docType": {
              "type": "string",
              "example": "HOWTO",
              "enum": [
                "HOWTO",
                "SAMPLES",
                "PUBLIC_FORUM",
                "SUPPORT_FORUM",
                "API_MESSAGE_FORMAT",
                "SWAGGER_DOC",
                "OTHER"
              ]
            },
            "summary": {
              "type": "string",
              "example": "Summary of Calculator Documentation"
            },
            "sourceType": {
              "type": "string",
              "example": "INLINE",
              "enum": [
                "INLINE",
                "URL",
                "FILE"
              ]
            },
            "sourceUrl": {
              "type": "string",
              "example": ""
            },
            "otherTypeName": {
              "type": "string",
              "example": ""
            },
            "visibility": {
              "type": "string",
              "example": "API_LEVEL",
              "enum": [
                "OWNER_ONLY",
                "PRIVATE",
                "API_LEVEL"
              ]
            },
            "apiName": {
              "type": "string",
              "example": "TestAPI",
              "description": "The name of the associated API"
            },
            "apiVersion": {
              "type": "string",
              "example": "1.0.0",
              "description": "The version of the associated API"
            },
            "apiProvider": {
              "type": "string",
              "example": "admin"
            },
            "apiUUID": {
              "type": "string"
            },
            "associatedType": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ResourcePolicyList": {
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourcePolicyInfo",
            "originalRef": "#/definitions/ResourcePolicyInfo"
          }
        },
        "count": {
          "type": "integer",
          "example": 1,
          "description": "Number of policy resources returned.\n"
        }
      },
      "title": "Resource policy List"
    },
    "ResourcePolicyInfo": {
      "properties": {
        "id": {
          "type": "string",
          "example": "01234567-0123-0123-0123-012345678901",
          "description": "UUID of the resource policy registry artifact\n"
        },
        "httpVerb": {
          "type": "string",
          "example": "get",
          "description": "HTTP verb used for the resource path"
        },
        "resourcePath": {
          "type": "string",
          "example": "CalculatorAPI",
          "description": "A string that represents the resource path of the api for the related resource policy"
        },
        "content": {
          "type": "string",
          "example": "<header description=\"SOAPAction\" name=\"SOAPAction\" scope=\"transport\" value=\"http://ws.cdyne.com/PhoneVerify/query/CheckPhoneNumber\"/>",
          "description": "The resource policy content"
        }
      },
      "title": "Resource policy Info object with conversion policy resource details."
    },
    "Settings": {
      "properties": {
        "storeUrl": {
          "type": "string",
          "description": "Store URL"
        },
        "environment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Environment",
            "originalRef": "#/definitions/Environment"
          }
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "monetizationAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonetizationAttribute",
            "originalRef": "#/definitions/MonetizationAttribute"
          }
        },
        "securityAuditProperties": {
          "type": "object",
          "properties": {}
        },
        "externalStoresEnabled": {
          "type": "boolean",
          "example": true,
          "description": "Is External Stores configuration enabled\n"
        }
      },
      "title": "SettingsDTO"
    },
    "SecurityAuditAttribute": {
      "properties": {
        "isGlobal": {
          "type": "boolean",
          "example": false
        },
        "overrideGlobal": {
          "type": "boolean",
          "example": false
        },
        "apiToken": {
          "type": "string",
          "example": "b1267ytf-b7gc-4aee-924d-ece81241efec"
        },
        "collectionId": {
          "type": "string",
          "example": "456ef957-5a79-449f-83y3-9027945d3c60"
        },
        "baseUrl": {
          "type": "string"
        }
      },
      "title": "SecurityAuditAttributeDTO"
    },
    "Pagination": {
      "properties": {
        "offset": {
          "type": "integer",
          "example": 0
        },
        "limit": {
          "type": "integer",
          "example": 1
        },
        "total": {
          "type": "integer",
          "example": 10
        },
        "next": {
          "type": "string",
          "description": "Link to the next subset of resources qualified.\nEmpty if no more resources are to be returned.\n"
        },
        "previous": {
          "type": "string",
          "description": "Link to the previous subset of resources qualified.\nEmpty if current subset is the first subset returned.\n"
        }
      },
      "title": "Pagination"
    },
    "MonetizationAttribute": {
      "properties": {
        "required": {
          "type": "boolean",
          "example": true,
          "description": "Is attribute required\n"
        },
        "name": {
          "type": "string",
          "description": "Name of the attribute\n"
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the attribute\n"
        },
        "description": {
          "type": "string",
          "description": "Description of the attribute\n"
        },
        "hidden": {
          "type": "boolean",
          "description": "Is attribute hidden\n"
        },
        "default": {
          "type": "string",
          "description": "Default value of the attribute\n"
        }
      },
      "title": "Monetization attribute object"
    },
    "Tenant": {
      "properties": {
        "domain": {
          "type": "string",
          "example": "wso2.com",
          "description": "tenant domain"
        },
        "status": {
          "type": "string",
          "example": "active",
          "description": "current status of the tenant active/inactive"
        }
      },
      "title": "Tenant"
    },
    "TenantList": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1,
          "description": "Number of tenants returned.\n"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tenant",
            "originalRef": "#/definitions/Tenant"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination",
          "originalRef": "#/definitions/Pagination"
        }
      },
      "title": "Tenant list"
    },
    "AlertTypesList": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 3,
          "description": "The number of alerts"
        },
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertType",
            "originalRef": "#/definitions/AlertType"
          }
        }
      },
      "title": "Alert Types List"
    },
    "AlertType": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1,
          "description": "The alert Id"
        },
        "name": {
          "type": "string",
          "example": "AbnormalRequestTime",
          "description": "The name of the alert."
        },
        "requireConfiguration": {
          "type": "boolean",
          "example": true,
          "description": "Whether the alert type require additional configurations."
        }
      },
      "title": "Alert Type"
    },
    "Alert": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1,
          "description": "The alert Id"
        },
        "name": {
          "type": "string",
          "example": "AbnormalRequestsPerMin",
          "description": "The name of the alert."
        },
        "configuration": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertConfig",
            "originalRef": "#/definitions/AlertConfig"
          }
        }
      },
      "title": "Alert"
    },
    "AlertsInfo": {
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Alert",
            "originalRef": "#/definitions/Alert"
          }
        },
        "emailList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Alerts Info"
    },
    "AlertsInfoResponse": {
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Alert",
            "originalRef": "#/definitions/Alert"
          }
        },
        "emailList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "failedConfigurations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertConfig",
            "originalRef": "#/definitions/AlertConfig"
          }
        }
      },
      "title": "Alerts Info Response"
    },
    "AlertConfigList": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 1
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertConfig",
            "originalRef": "#/definitions/AlertConfig"
          }
        }
      },
      "title": "Alert Configuration List"
    },
    "AlertConfig": {
      "properties": {
        "configurationId": {
          "type": "string",
          "example": "UGl6emFTaGFja0FQSSsxLjAuMCtEZWZhdWx0QXBwbGljYXRpb24K",
          "description": "The alert config subscription id."
        },
        "configuration": {
          "type": "object",
          "example": {
            "apiName": "PizzaShackAPI",
            "apiVersion": "1.0.0",
            "applicationName": "DefaultApplication",
            "requestConunt": "12"
          },
          "description": "The config parameters.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "Alert Configuration"
    },
    "AlertConfigInfo": {
      "type": "object",
      "title": "Alert Configuration Info",
      "description": "The config parameters.",
      "example": {
        "apiName": "PizzaShackAPI",
        "apiVersion": "1.0.0",
        "applicationName": "DefaultApplication",
        "requestConunt": "12"
      },
      "additionalProperties": {
        "type": "string"
      }
    }
  },
  "parameters": {
    "apiId": {
      "name": "apiId",
      "in": "path",
      "description": "**API ID** consisting of the **UUID** of the API.\n",
      "required": true,
      "type": "string"
    },
    "endpointId": {
      "name": "endpointId",
      "in": "path",
      "description": "**Endpoint ID** consisting of the **UUID** of the Endpoint**.\n",
      "required": true,
      "type": "string"
    },
    "apiId-Q": {
      "name": "apiId",
      "in": "query",
      "description": "**API ID** consisting of the **UUID** of the API.\nThe combination of the provider of the API, name of the API and the version is also accepted as a valid API I.\nShould be formatted as **provider-name-version**.\n",
      "required": true,
      "type": "string"
    },
    "labelType-Q": {
      "name": "labelType",
      "in": "query",
      "description": "**API ID** consisting of the **UUID** of the API.\nThe combination of the provider of the API, name of the API and the version is also accepted as a valid API I.\nShould be formatted as **provider-name-version**.\n",
      "required": false,
      "type": "string"
    },
    "name": {
      "name": "name",
      "in": "path",
      "description": "Name of the API\n",
      "required": true,
      "type": "string"
    },
    "version": {
      "name": "version",
      "in": "path",
      "description": "Version of the API\n",
      "required": true,
      "type": "string"
    },
    "documentId": {
      "name": "documentId",
      "in": "path",
      "description": "Document Identifier\n",
      "required": true,
      "type": "string"
    },
    "applicationId": {
      "name": "applicationId",
      "in": "path",
      "description": "**Application Identifier** consisting of the UUID of the Application.\n",
      "required": true,
      "type": "string"
    },
    "subscriptionId": {
      "name": "subscriptionId",
      "in": "path",
      "description": "Subscription Id\n",
      "required": true,
      "type": "string"
    },
    "mediationPolicyId": {
      "name": "mediationPolicyId",
      "in": "path",
      "description": "Mediation policy Id\n",
      "required": true,
      "type": "string"
    },
    "resourcePolicyId": {
      "name": "resourcePolicyId",
      "in": "path",
      "description": "registry resource Id\n",
      "required": true,
      "type": "string"
    },
    "subscriptionId-Q": {
      "name": "subscriptionId",
      "in": "query",
      "description": "Subscription Id\n",
      "required": true,
      "type": "string"
    },
    "policyName": {
      "name": "policyName",
      "in": "path",
      "description": "Tier name\n",
      "required": true,
      "type": "string"
    },
    "policyName-Q": {
      "name": "policyName",
      "in": "query",
      "description": "Name of the policy\n",
      "required": true,
      "type": "string"
    },
    "policyLevel": {
      "name": "policyLevel",
      "in": "path",
      "description": "List API or Application or Resource type policies.\n",
      "required": true,
      "type": "string",
      "enum": [
        "api",
        "subcription"
      ]
    },
    "policyLevel-Q": {
      "name": "policyLevel",
      "in": "query",
      "description": "List API or Application or Resource type policies.\n",
      "required": true,
      "type": "string",
      "enum": [
        "api",
        "subcription"
      ]
    },
    "limit": {
      "name": "limit",
      "in": "query",
      "description": "Maximum size of resource array to return.\n",
      "required": false,
      "type": "integer",
      "default": 25
    },
    "Accept": {
      "name": "Accept",
      "in": "header",
      "description": "Media types acceptable for the response. Default is application/json.\n",
      "required": false,
      "type": "string",
      "default": "application/json"
    },
    "offset": {
      "name": "offset",
      "in": "query",
      "description": "Starting point within the complete list of items qualified.\n",
      "required": false,
      "type": "integer",
      "default": 0
    },
    "If-None-Match": {
      "name": "If-None-Match",
      "in": "header",
      "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n",
      "required": false,
      "type": "string"
    },
    "If-Match": {
      "name": "If-Match",
      "in": "header",
      "description": "Validator for conditional requests; based on ETag.\n",
      "required": false,
      "type": "string"
    },
    "scopeName": {
      "name": "name",
      "in": "path",
      "description": "Scope name\n",
      "required": true,
      "type": "string"
    },
    "expand": {
      "name": "expand",
      "in": "query",
      "description": "Defines whether the returned response should contain full details of API\n",
      "required": false,
      "type": "boolean"
    },
    "threatProtectionPolicyId": {
      "name": "policyId",
      "in": "path",
      "description": "The UUID of a Policy\n",
      "required": true,
      "type": "string"
    },
    "roleId": {
      "name": "roleId",
      "in": "path",
      "description": "The Base 64 URL encoded role name with domain. If the given role is in secondary user-store, role ID should be\nderived as Base64URLEncode({user-store-name}/{role-name}). If the given role is in PRIMARY user-store, role ID\ncan be derived as Base64URLEncode(role-name)\n",
      "required": true,
      "type": "string"
    },
    "threatProtectionPolicy": {
      "in": "body",
      "name": "threatProtectionPolicy",
      "description": "Threat protection policy request parameter\n",
      "required": true,
      "schema": {
        "$ref": "#/definitions/ThreatProtectionPolicy",
        "originalRef": "#/definitions/ThreatProtectionPolicy"
      }
    },
    "requestedTenant": {
      "name": "X-WSO2-Tenant",
      "in": "header",
      "description": "For cross-tenant invocations, this is used to specify the tenant domain, where the resource need to be\n  retirieved from.\n",
      "required": false,
      "type": "string"
    },
    "apiProductId": {
      "name": "apiProductId",
      "in": "path",
      "description": "**API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.\n",
      "required": true,
      "type": "string",
      "x-encoded": true
    },
    "tenantDomain": {
      "name": "tenantDomain",
      "in": "path",
      "description": "The domain of a specific tenant\n",
      "required": true,
      "type": "string"
    },
    "alertType": {
      "name": "alertType",
      "in": "path",
      "description": "The alert type.",
      "required": true,
      "type": "string"
    },
    "configurationId": {
      "name": "configurationId",
      "in": "path",
      "description": "The alert configuration id.",
      "required": true,
      "type": "string"
    }
  }
}