<%
var log = new Log("Services login DCR request");

var site = require("/site/conf/site.json");
var SETTINGS_REST_API_URL = "/api/am/publisher/v1.0/settings";

var utils = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil;
var serverUrl = utils.getServerURL();

var settingsAPIUrl = serverUrl + SETTINGS_REST_API_URL;

var settingsResponse = get(settingsAPIUrl, {}, "json");
//TODO: use a lock to handle concurrent requests to optimize
application.put("settingsResponse", settingsResponse.data);

var dcrUrl = settingsResponse.data.dcrUrl;
var authorizeEndpoint = settingsResponse.data.authorizeUrl;
var callbackUrl = serverUrl + site.context + "/services/auth/callback";
var scopes = settingsResponse.data.scopes.join(" ");

var SystemApplicationDAO = Packages.org.wso2.carbon.apimgt.impl.dao.SystemApplicationDAO;
var systemApplicationDAO = new SystemApplicationDAO();

systemApplicationDTO = systemApplicationDAO.getClientCredentialsForApplication("admin_publisher");
if (systemApplicationDTO !== null) {
    var clientId = systemApplicationDTO.getConsumerKey();
} else {
    var dcrRequestData = {
        "callbackUrl": callbackUrl,
        "clientName": "publisher",
        "owner": "admin",
        "grantType": "authorization_code refresh_token",
        "saasApp": true
    };

    var result = post(dcrUrl, JSON.stringify(dcrRequestData), {
        "Authorization": "Basic YWRtaW46YWRtaW4=",
        "Content-Type": "application/json"
    }, "json");
    var clientId = result.data.clientId;
    var clientSecret = result.data.clientSecret;


    var addApplicationKey = systemApplicationDAO.addApplicationKey("admin_publisher", clientId, clientSecret);
    if (!addApplicationKey) {
        log.error("Error while persisting application information in system application DB table!!");
        log.error("Client ID = " + clientId);
    }
    log.info("clientId = " + clientId);
    var authRequestParams = "?response_type=code&client_id=" + clientId + "&scope=" + scopes + "&redirect_uri=" + callbackUrl;
    log.debug("Redirecting to = " + authorizeEndpoint + authRequestParams);
    var cookie = {'name': 'CLIENT_ID', 'value': clientId, 'path': "/publisher-new/", "HttpOnly": false, "secure": true, "maxAge": -1};
    response.addCookie(cookie);
    response.sendRedirect(authorizeEndpoint + authRequestParams);

}

%>
